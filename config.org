* Basics
** General
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src

#+begin_src emacs-lisp
(require 'package)
(setq package-enable-at-startup nil) ; tells emacs not to load any packages before starting up

;; the following lines tell emacs where on the internet to look up
;; for new packages.
;; when facing problems with package installation delete ~/.emacs.d/elpa/archives/melpa/archive-contents and `M-x package-refresh-contens` on next launch
(setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                         ("gnu"       . "https://elpa.gnu.org/packages/")
                         ("melpa"     . "https://melpa.org/packages/")
                         ;;("marmalade" . "http://marmalade-repo.org/packages/")
                         ))

;;  (package-initialize) ; guess what this one does ?



;; Bootstrap `use-package'
(unless (package-installed-p 'use-package) ; unless it is already installed
  (package-refresh-contents) ; updage packages archive
  (package-install 'use-package)) ; and install the most recent version of use-package

(require 'use-package) ; guess what this one does too ?

(setq use-package-expand-minimally t)


#+end_src

#+begin_src emacs-lisp
(setq delete-old-versions -1 )		; delete excess backup versions silently
(setq version-control t )		; use version control
(setq vc-make-backup-files t )		; make backups file even when in version controlled dir
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
(fset 'yes-or-no-p 'y-or-n-p)
(setq vc-follow-symlinks t )				       ; don't ask for confirmation when opening symlinked file
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
(setq inhibit-startup-screen t )	; inhibit useless and old-school startup screen
(setq ring-bell-function 'ignore )	; silent bell when you make a mistake
(setq coding-system-for-read 'utf-8 )	; use utf-8 by default
(setq coding-system-for-write 'utf-8 )
(setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
(setq default-fill-column 80)		; toggle wrapping text at the 80th character
(setq-default tab-width 2)                    ; tab are 2 spaces large
(setq initial-scratch-message "Welcome to Emacs") ; print a default message in the empty scratch buffer opened at startup
(setq tab-stop-list (number-sequence 2 120 2)) ;; set tab length
(setq evil-want-C-u-scroll t) ;; scroll with C-u like in vim
;;(set-display-table-slot standard-display-table 'wrap ?\ )
(set-display-table-slot standard-display-table 0 ?\ ) 
(set-display-table-slot standard-display-table 'wrap ?\ )
(setq-default indent-tabs-mode nil)
(mapc
 (lambda (face) (set-face-attribute face nil :weight 'normal :underline nil)) (face-list))

(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'narrow-to-region 'disabled nil)

(global-set-key [mouse-3] 'mouse-popup-menubar-stuff)
(setq font-lock-maximum-decoration t)
(setq load-prefer-newer t)

(setq whitespace-line-column 999)
(set-face-bold-p 'bold nil)
(setq-default left-margin-width 0 right-margin-width 0) ; Define new widths.
(set-window-buffer nil (current-buffer)) 
(setq frame-resize-pixelwise t)
#+end_src
*** Font
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(font . "Bront 14")) ;; love dis font omfg! gives me apple vibes on linux
;; (add-to-list 'default-frame-alist '(font . "Bront 18")) ;; love dis font omfg! gives me apple vibes on linux
#+end_src

** Modeline
#+BEGIN_SRC emacs-lisp
(defadvice vc-mode-line (after strip-backend () activate)
  (when (stringp vc-mode)
    (let ((noback (replace-regexp-in-string
                   (format "^ %s:" (vc-backend buffer-file-name))
                   " " vc-mode)))
      (setq vc-mode noback))))

(defun simple-mode-line-render (left right)
  "Return a string of `window-width' length containing LEFT, and RIGHT
 aligned respectively."
  (let* ((available-width (- (window-width) (length left) 2)))
    (format (format " %%s %%%ds " available-width) left right)))

(setq-default
 mode-line-format
 '((:eval
    (simple-mode-line-render
     ;; left
     (format-mode-line
      (quote
       (" %e"
        mode-line-modified
        mode-line-frame-identification
        mode-line-buffer-identification
        (vc-mode vc-mode)
        " [%l:%c] "
        ;; evil-mode-line-tag
        "%m"
        mode-line-misc-info
        )))
     ;; right
     (format-mode-line
      (eval (format-time-string "%H:%M %d.%m.%y")
            ;; mode-line-modes
            ))))))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(use-package base16-theme :ensure t)
 (load-theme 'base16-onedark)
#+END_SRC
Always unify these:
#+begin_src emacs-lisp
(set-face-attribute 'fringe nil
                :foreground (face-foreground 'default)
                :background (face-background 'default))
(set-face-attribute 'vertical-border nil
                :foreground (face-foreground 'default)
                :background (face-background 'default))
(set-face-attribute 'line-number nil
                :background (face-background 'default))

(set-face-foreground 'line-number "#696969")
#+end_src
Function for vim-like increment/decrement
#+BEGIN_SRC emacs-lisp
(defun my-change-number-at-point (change)
  (let ((number (number-at-point))
        (point (point)))
    (when number
      (progn
        (forward-word)
        (search-backward (number-to-string number))
        (replace-match (number-to-string (funcall change number)))
        (goto-char point)))))
(defun my-increment-number-at-point ()
                                        ;"Increment number at point like vim's C-a"
  (interactive)
  (my-change-number-at-point '1+))
(defun my-decrement-number-at-point ()
  "Decrement number at point like vim's C-x"
  (interactive)
  (my-change-number-at-point '1-))
(global-set-key (kbd "C-c a") 'my-increment-number-at-point)
(global-set-key (kbd "C-c x") 'my-decrement-number-at-point)

#+END_SRC
Other functions
#+begin_src emacs-lisp
(eval-after-load 'term
  '(progn
     (define-key term-mode-map (kbd "C-j") 'term-char-mode)
     (define-key term-mode-map (kbd "C-k") 'term-line-mode)
     (define-key term-raw-map (kbd "C-j") 'term-char-mode)
     (define-key term-raw-map (kbd "C-k") 'term-line-mode)
     ))


(defun popup-shell ()
  (interactive)
  (if (get-buffer-window "*terminal*")
      (progn (setq popup-shell-open nil)
             (delete-windows-on "*terminal*")
             )
    (split-window-below)
    (windmove-down)
    (eshell)
    ;; (term "/usr/bin/zsh")
    (shrink-window 10)
    ))

(defun my/disable-scroll-bars (frame)
  (modify-frame-parameters frame
                           '((vertical-scroll-bars . nil)
                             (horizontal-scroll-bars . nil))))
(add-hook 'after-make-frame-functions 'my/disable-scroll-bars)

(defun open-termite ()
  (interactive "@")
  (shell-command (concat "termite"
                         " > /dev/null 2>&1 & disown") nil nil))
(defun indent-buffer ()
  "Apply indentation rule to the entire buffer."
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max)))

(defun add-semicolon ()
  (interactive)
  (end-of-line)
  (when (not (looking-back ";"))
    (insert ";"))
  (evil-first-non-blank))

(defun insert-uuid ()
  (interactive)
  (let ((rnd (md5 (format "%s%s%s%s%s%s%s"
                          (random)
                          (current-time)
                          (user-uid)
                          (emacs-pid)
                          (user-full-name)
                          user-mail-address
                          (recent-keys)))))
    (insert (format "%s-%s-4%s-%s%s-%s"
                    (substring rnd 0 8)
                    (substring rnd 8 12)
                    (substring rnd 13 16)
                    (format "%x"
                            (logior
                             #b10000000
                             (logand
                              #b10111111
                              (string-to-number
                               (substring rnd 16 18) 16))))
                    (substring rnd 18 20)
                    (substring rnd 20 32)))
    ))
#+end_src

** Generic Packages
*** Evil
#+begin_src emacs-lisp
(setq evil-symbol-word-search t)
(setq evil-want-Y-yank-to-eol t)
(use-package evil
  :ensure t
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
  (setcdr evil-insert-state-map nil)
  (define-key evil-insert-state-map [escape] 'evil-normal-state)
  (setq-default evil-shift-width 2)
  (setq evil-search-module 'evil-search)
  ;;    (evil-set-initial-state 'occur-mode 'normal)

  ;;    (setq evil-ex-nohighlight t)
  ;; More configuration goes here
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "k") 'evil-previous-visual-line)
  )
#+end_src

*** Counsel
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :defer t
  :config
  (setq recentf-max-saved-items 150)
  ;;  (setq counsel-find-file-at-point t)
  ;;  (setq counsel-locate-cmd 'counsel-locate-cmd-mdfind)
  (define-key evil-insert-state-map (kbd "M-x") 'counsel-M-x)
  (setq counsel-find-file-ignore-regexp "\\.DS_Store\\|.git\\|node_modules")
  (setq ivy-initial-inputs-alist nil)
  )

(use-package smex :ensure t)
#+end_src

*** General.el 
#+BEGIN_SRC emacs-lisp
(use-package general :ensure t)
#+END_SRC
*** Org
#+BEGIN_SRC emacs-lisp
(setq org-export-async-init-file "~/.emacs.d/async-org-export.el")
(setq org-export-async-debug t)
;; (setq org-default-notes-file "~/.notes.org")
#+END_SRC
#+begin_src emacs-lisp
(add-hook
 'org-mode-hook
 (lambda ()
   (setq-local electric-pair-inhibit-predicate
               `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src

#+begin_src emacs-lisp
(setq org-edit-src-content-indentation 0)

    ;; org-hide-emphasis-markers t)
    ;; (add-hook 'post-command-hook 'kk/org-latex-fragment-toggle t)
    (setq org-format-latex-options
          (quote(:foreground default :background default :scale 1.7 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
                             ("begin" "$1" "$" "$$" "\\(" "\\["))))
                                            ;(require 'epa-file)
                                            ;(epa-file-enable)
    (require 'org-crypt) 
    (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance (quote ("crypt")))
    ;; GPG key to use for encryption
    ;; Either the Key ID or set to nil to use symmetric encryption.
    (setq org-crypt-key "B489EB34B4E6E154")
    (setq org-src-window-setup 'current-window)

    (general-define-key
     :states '(normal motion)
     :keymaps 'org-mode-map
     :prefix "SPC"
     "m" '(:ignore :which-key "Major Mode[Org]")
     "mp" '(org-latex-export-to-pdf :which-key "Export to Pdf")
     "mb" '(org-hugo-export-to-md :which-key "Export to Hugo Markdown")
     "ms" '(org-edit-special :which-key "Edit source code")
     )

    (general-define-key
     :states '(normal motion)
     :keymaps 'org-src-mode-map
     :prefix "SPC"
     "m" '(:ignore :which-key "Major Mode[Org Source]")
     "ms" '(org-edit-src-exit :which-key "Save source and exit")
     "mq" '(org-edit-src-abort :which-key "Abort source code")
     )
    (add-hook 'org-mode-hook 'visual-line-mode)
    (add-hook 'org-mode-hook 'company-mode)
    (add-hook 'org-mode-hook (lambda () (blink-cursor-mode -1)))
  ;  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   (add-hook 'org-mode-hook 'display-line-numbers-mode)

  ; Caption below or above images/tables
  ;; (setq org-latex-caption-above '(image table))
                                            ; Force utf8 and then change todo symbols
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (when (display-graphic-p)
      (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

    (setq org-todo-keywords (quote((sequence "⚑ Todo" "⚐ In Progress | Waiting" "|" "✔ Done" "✘ Canceled"))))
    (setq org-todo-keyword-faces
          '(("⚑ Todo" . "deep sky blue") ("⚐ In Progress | Waiting" . "orange") ("✘ Canceled" . (:foreground "red"))))
    (setq org-adapt-indentation nil)
    (setq-default org-display-custom-times t)
    (setq org-time-stamp-custom-formats '("<%a %d.%m.%Y>" . "<%a %d.%m.%Y %H:%M>"))
    (setq org-agenda-window-setup 'only-window)

;; Used for bachelor thesis:
(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"
        "biber %b"
        "pdflatex -interaction nonstopmode -output-directory %o %f"
        "pdflatex -interaction nonstopmode -output-directory %o %f"))

;; Allows source code execution with C-C C-c
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)))
#+end_src
*** Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(setq display-line-numbers-current-absolute nil)
#+end_src
*** Dired
Todo: Write "sired" or "sidered" :D
#+BEGIN_SRC emacs-lisp
(setq auto-revert-verbose nil)
(setq dired-dwim-target t)
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
(add-hook 'dired-mode-hook 'auto-revert-mode)

(put 'dired-find-alternate-file 'disabled nil)

(general-define-key
     :states '(normal motion)
     :keymaps 'dired-mode-map
     "H" '(dired-up-directory :which-key "Go up directory")
     "G" '(end-of-buffer :which-key "Go to end of buffer")
     "M" '(dired-mark-files-regexp :which-key "Makr files with regex")
     "gg" '(beginning-of-buffer :which-key "Go to start of buffer")
     "L" '(dired-find-alternate-file :which-key "Enter and kill current dired buffer")
     "f" '(find-file :which-key "Find/create file")
     ;; "RET" '(dired-find-alternate-file :which-key "Enter and kill current dired buffer")
     )
#+END_SRC
*** Dired Subtree
#+BEGIN_SRC emacs-lisp
(use-package dired-subtree :ensure t
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
#+END_SRC
*** Dired Subtree Faces
#+BEGIN_SRC emacs-lisp
(defun shade-color (color percent)
  (let ((R (min 255 (/  (* (+ 100 percent) (string-to-number (substring background-color 1 3) 16)) 100)))
        (G (min 255 (/  (* (+ 100 percent) (string-to-number (substring background-color 3 5) 16)) 100)))
        (B (min 255 (/  (* (+ 100 percent) (string-to-number (substring background-color 5 7) 16)) 100))))
    (concat "#" (format "%X" R) (format "%X" G) (format "%X" B))))

(eval-after-load "dired-subtree" '(progn
                            (let ((background-color (face-attribute 'default :background)))
                              (set-face-background 'dired-subtree-depth-1-face 
                                                   (shade-color background-color -5))
                              (set-face-background 'dired-subtree-depth-2-face 
                                                   (shade-color background-color -10))
                              (set-face-background 'dired-subtree-depth-3-face 
                                                   (shade-color background-color -15))
                              (set-face-background 'dired-subtree-depth-4-face 
                                                   (shade-color background-color -20))
                              (set-face-background 'dired-subtree-depth-5-face 
                                                   (shade-color background-color -25))
                              (set-face-background 'dired-subtree-depth-6-face 
                                                   (shade-color background-color -30)))))



#+END_SRC
*** Dired Toggle
#+begin_src emacs-lisp
(use-package dired-toggle
  :ensure t
  :defer t
  :bind (:map dired-mode-map
         ("q" . #'dired-toggle-quit)
         ([remap dired-find-file] . #'dired-toggle-find-file)
         ([remap dired-up-directory] . #'dired-toggle-up-directory)
         ("C-c C-u" . #'dired-toggle-up-directory))
  :config
  ;; (setq dired-toggle-window-size 32)
  (setq dired-toggle-window-side 'left)

  ;; Optional, enable =visual-line-mode= for our narrow dired buffer:
  ;; (add-hook 'dired-toggle-mode-hook
  ;;           (lambda () (interactive)
  ;;             (visual-line-mode 1)
  ;;             (setq-local visual-line-fringe-indicators '(nil right-curly-arrow))
  ;;             (setq-local word-wrap nil)))
  )
#+end_src
*** Emacs Speak Statistics (ESS)
#+begin_src emacs-lisp
  (use-package popup :ensure t)
#+end_src

*** Which key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode 1)
  (setq which-key-idle-delay 1))

#+end_src

*** Magit
#+begin_src emacs-lisp
(use-package evil-magit
  :ensure t
                                        ;   :defer t ;; will loose keybinding overwritings
  :config 
  ; Only two panes/windows instead of 3 when ediffing changes
  (setq magit-ediff-dwim-show-on-hunks t)
  ;; (add-hook 'magit-mode-hook 'visual-line-mode)
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)
(define-key transient-map        (kbd "<escape>") 'transient-quit-one)
(define-key transient-edit-map   (kbd "<escape>") 'transient-quit-one)
(define-key transient-sticky-map (kbd "<escape>") 'transient-quit-seq)
)


#+end_src

*** Ediff
#+BEGIN_SRC emacs-lisp
  (require 'ediff nil t)

  (defconst evil-collection-ediff-maps '(ediff-mode-map))

  (defvar evil-collection-ediff-initial-state-backup (evil-initial-state 'ediff-mode))
  (defvar evil-collection-ediff-long-help-message-compare2-backup ediff-long-help-message-compare2)
  (defvar evil-collection-ediff-long-help-message-compare3-backup  ediff-long-help-message-compare3)
  (defvar evil-collection-ediff-long-help-message-narrow2-backup  ediff-long-help-message-narrow2)
  (defvar evil-collection-ediff-long-help-message-word-backup  ediff-long-help-message-word-mode)
  (defvar evil-collection-ediff-long-help-message-merge-backup  ediff-long-help-message-merge)
  (defvar evil-collection-ediff-long-help-message-head-backup  ediff-long-help-message-head)
  (defvar evil-collection-ediff-long-help-message-tail-backup  ediff-long-help-message-tail)

  (defvar evil-collection-ediff-help-changed nil)

  (defun evil-collection-ediff-adjust-help ()
    "Adjust long help messages to reflect evil-ediff bindings."
    (unless evil-collection-ediff-help-changed
      (dolist (msg '(ediff-long-help-message-compare2
                     ediff-long-help-message-compare3
                     ediff-long-help-message-narrow2
                     ediff-long-help-message-word-mode
                     ediff-long-help-message-merge
                     ediff-long-help-message-head
                     ediff-long-help-message-tail))
        (dolist (chng '( ;;("^" . "  ")
                        ("p,DEL -previous diff " . "k,N,p -previous diff ")
                        ("n,SPC -next diff     " . "  j,n -next diff     ")
                        ("    j -jump to diff  " . "    d -jump to diff  ")
                        ("    h -highlighting  " . "    H -highlighting  ")
                        ("  v/V -scroll up/dn  " . "C-u/d -scroll up/dn  ")
                        ("  </> -scroll lt/rt  " . "zh/zl -scroll lt/rt  ")
                        ("  z/q -suspend/quit"   . "C-z/q -suspend/quit")))
          (setf (symbol-value msg)
                (replace-regexp-in-string (car chng) (cdr chng) (symbol-value msg))))))
    (setq evil-collection-ediff-help-changed t))

  (defun evil-collection-ediff-scroll-left (&optional arg)
    "Scroll left."
    (interactive "P")
    (let ((last-command-event ?>))
      (ediff-scroll-horizontally arg)))

  (defun evil-collection-ediff-scroll-right (&optional arg)
    "Scroll right."
    (interactive "P")
    (let ((last-command-event ?<))
      (ediff-scroll-horizontally arg)))

  (defun evil-collection-ediff-scroll-up (&optional arg)
    "Scroll up by half of a page."
    (interactive "P")
    (let ((last-command-event ?V))
      (ediff-scroll-vertically arg)))

  (defun evil-collection-ediff-scroll-down (&optional arg)
    "Scroll down by half of a page."
    (interactive "P")
    (let ((last-command-event ?v))
      (ediff-scroll-vertically arg)))

  (defun evil-collection-ediff-scroll-down-1 ()
    "Scroll down by a line."
    (interactive)
    (let ((last-command-event ?v))
      (ediff-scroll-vertically 1)))

  (defun evil-collection-ediff-scroll-up-1 ()
    "Scroll down by a line."
    (interactive)
    (let ((last-command-event ?V))
      (ediff-scroll-vertically 1)))

  (defun evil-collection-ediff-first-difference ()
    "Jump to first difference."
    (interactive)
    (ediff-jump-to-difference 1))

  (defun evil-collection-ediff-last-difference ()
    "Jump to last difference."
    (interactive)
    (ediff-jump-to-difference ediff-number-of-differences))

  ;; (defun evil-collection-ediff-restore-diff ()
  ;;   "Restore the copy of current region."
  ;;   (interactive)
  ;;   (ediff-restore-diff nil ?a)
  ;;   (ediff-restore-diff nil ?b))

  (defvar evil-collection-ediff-bindings
    '(("d"    . ediff-jump-to-difference)
      ("H"    . ediff-toggle-hilit)
      ("\C-e" . evil-collection-ediff-scroll-down-1)
      ("\C-y" . evil-collection-ediff-scroll-up-1)
      ("j"    . ediff-next-difference)
      ("k"    . ediff-previous-difference)
      ("N"    . ediff-previous-difference)
      ("gg"   . evil-collection-ediff-first-difference)
      ("G"    . evil-collection-ediff-last-difference)
      ("\C-d" . evil-collection-ediff-scroll-down)
      ("\C-u" . evil-collection-ediff-scroll-up)
      ("\C-z" . ediff-suspend)
      ("z"    . nil)
      ("zl"   . evil-collection-ediff-scroll-right)
      ("zh"   . evil-collection-ediff-scroll-left)
      ;; Not working yet
      ;; ("u"    . evil-collection-ediff-restore-diff)
      )
    "A list of bindings changed/added in evil-ediff.")

  (defun evil-collection-ediff-startup-hook ()
    "Place evil-ediff bindings in `ediff-mode-map'."
    (evil-set-initial-state 'ediff-mode 'normal)
    (evil-make-overriding-map ediff-mode-map 'normal)
    (dolist (entry evil-collection-ediff-bindings)
      (define-key ediff-mode-map (car entry) (cdr entry)))
    (unless (or ediff-3way-comparison-job
                (eq ediff-split-window-function 'split-window-vertically))
      (define-key ediff-mode-map "l" 'ediff-copy-A-to-B)
      (define-key ediff-mode-map "h" 'ediff-copy-B-to-A))
    (evil-normalize-keymaps)
    nil)

  (defun evil-collection-ediff-setup ()
    "Initialize evil-ediff."
    (add-hook 'ediff-startup-hook 'evil-collection-ediff-startup-hook)
    (evil-collection-ediff-adjust-help))

  (evil-collection-ediff-setup)
#+END_SRC
*** Avy
#+begin_src emacs-lisp
(use-package avy :ensure t
  :defer t
  :commands (avy-goto-word-1))
#+end_src
*** Ivy
#+begin_src emacs-lisp
(use-package ivy
  :defer t
  :ensure t
  :commands (ivy-switch-buffer
             ivy-switch-buffer-other-window)
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers nil)) ;; set to true to show recent files

(use-package ivy-rich
  :ensure t
  :after ivy
  ;; :custom
  ;; (ivy-virtual-abbreviate 'full
  ;;                         ivy-rich-switch-buffer-align-virtual-buffer t
  ;;                         ivy-rich-path-style 'abbrev)
  :config
  (setq ivy-rich-path-style 'abbreviate)
  (setq ivy-rich--display-transformers-list
        '(ivy-switch-buffer
          (:columns
           ((ivy-rich-candidate (:width 30))
            (ivy-rich-switch-buffer-size (:width 7))
            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
            (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
            (ivy-rich-switch-buffer-project (:width 15 :face success))
            (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
           :predicate
           (lambda (cand) (get-buffer cand)))

          counsel-M-x
          (:columns
           ((counsel-M-x-transformer (:width 40))  ; thr original transfomer
            (ivy-rich-counsel-function-docstring (:width 38 :face font-lock-doc-face))))  ; return the docstring of the command


          counsel-describe-function
          (:columns
           ((counsel-describe-function-transformer (:width 40))  ; the original transformer
            (ivy-rich-counsel-function-docstring (:width 38 :face font-lock-doc-face))))  ; return the docstring of the function


          counsel-describe-variable
          (:columns
           ((counsel-describe-variable-transformer (:width 40))  ; the original transformer
            (ivy-rich-counsel-variable-docstring (width: 38 :face font-lock-doc-face))))  ; return the docstring of the variable


          counsel-recentf
          (:columns
           ((ivy-rich-candidate (:width 0.33)) ; return the candidate itself
            (ivy-rich-file-last-modified-time (:width 15 :face font-lock-comment-face)))) ; return the last modified time of the file

          )
        )

  (ivy-rich-mode 1)
  )
#+end_src

*** Projectile
Todo: Maybe look for an projectile replacement since I mostly use "pp" and "p/" and projectile is a huge package
#+begin_src emacs-lisp
(use-package projectile :ensure t
  :defer t
  :config
  (setq projectile-find-dir-includes-top-level t)
  (setq projectile-mode-line " foo")
  (setq projectile-completion-system 'ivy)
  (setq projectile-file-exists-local-cache-expire (* 5 60))
  (setq projectile-globally-ignored-directories (append projectile-globally-ignored-directories  "__pycache__" ".cquery_cached_index"))
  (setq projectile-git-submodule-command nil)
  (projectile-global-mode t))
#+end_src

*** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard :ensure t
    :config
    (display-line-numbers-mode) ; doesnt work to toggle..
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-banner-logo-title "“A good programmer is someone who always looks both ways before crossing a one-way street.” (Yoda)")
    ;(setq dashboard-startup-banner (expand-file-name "emacs-logo.png"
                                                     ;user-emacs-directory))
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            ;;(registers . 5)
                            ;;(agenda . 5)
                            (projects . 5)))
    (set-face-attribute 'widget-button nil :underline nil)
    )
  ;; (add-hook 'dashboard-mode-hook
  ;; 	    (lambda ()
  ;; 	       (set-display-table-slot buffer-display-table 'wrap ?\ )))
#+end_src

*** Page Break Lines
Display horizontal lines instead of ugly characters
#+begin_src emacs-lisp
(use-package page-break-lines :ensure t)
#+end_src

*** YaSnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :defer 1
  :config
  (use-package yasnippet-snippets
    :ensure t)
  ;; (yas-reload-all)
  (yas-global-mode 1)
  )
#+END_SRC
*** Company
#+begin_src emacs-lisp
(use-package company :ensure t
      :defer t
      :config
      ;(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
      ;(setq company-backends company-backends)
      (setq company-minimum-prefix-length 2)
      (setq company-idle-delay 0.2)
      (add-to-list 'company-backends 'company-tern)
      (add-to-list 'company-backends 'company-files)
      (add-to-list 'company-backends 'company-dabbrev)
      (add-hook 'company-mode-hook 'company-quickhelp-mode)
      (setq company-dabbrev-downcase nil)
      (define-key evil-insert-state-map (kbd "C-/") 'dabbrev-expand)
      (define-key evil-insert-state-map (kbd "M-/") 'company-files)
      ;(yas-reload-all)
      ;; (add-to-list 'company-backends 'company-yasnippet)
      (defvar company-mode/enable-yas t
  "Enable yasnippet for all backends.")

(defun company-mode/backend-with-yas (backend)
  (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))

(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))

)
;; (setq company-clang-executable "/usr/bin/clang")
                                        ;  :config
                                        ;  (global-company-mode t))
(with-eval-after-load 'company
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-mode-map (kbd "C-SPC") #'company-complete)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))

;(defvar company-mode/enable-yas t
; "Enable yasnippet for all backends.")
;(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
(use-package company-quickhelp :ensure t
 :config
 (setq pos-tip-background-color (face-background 'default)
      pos-tip-foreground-color (face-foreground 'default)))

#+end_src

*** Evil Commentary
#+begin_src emacs-lisp
(use-package evil-commentary :ensure t :defer t)
#+end_src
*** Indent Guide
#+begin_src emacs-lisp
;; (use-package indent-guide :ensure t
;; :defer t
;; :config (set-face-background 'indent-guide-face "SkyBlue4")
;; ;(setq indent-guide-delay 0.1)
;; (setq indent-guide-char " "))
; (use-package highlight-indentation :ensure t
; :config
;  (set-face-background 'highlight-indentation-face "#ffffff")
;  (set-face-background 'highlight-indentation-current-column-face "#ff0000")
;)
(use-package highlight-indent-guides :ensure t :config (setq highlight-indent-guides-method 'character))

#+end_src

*** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters :ensure t :defer t)
#+end_src
*** Ag
#+begin_src emacs-lisp
(use-package ag :ensure t :defer t)
#+end_src

*** Tab/Buffer/Workspace
#+begin_src emacs-lisp
(use-package eyebrowse :ensure t
  :defer 2
  :config (eyebrowse-mode t)
                                        ;(set-face-foreground 'eyebrowse-mode-line-active "medium turquoise")
  (set-face-foreground 'eyebrowse-mode-line-active "purple")
  (setq eyebrowse-mode-line-separator "|")
  (setq eyebrowse-new-workspace "*dashboard*")
  (general-define-key
   :states '(normal emacs)
   "M-1" '(eyebrowse-switch-to-window-config-1 :which-key "workspace 1")
   "M-2" '(eyebrowse-switch-to-window-config-2 :which-key "workspace 2")
   "M-3" '(eyebrowse-switch-to-window-config-3 :which-key "workspace 3")
   "M-4" '(eyebrowse-switch-to-window-config-4 :which-key "workspace 4")
   "M-5" '(eyebrowse-switch-to-window-config-5 :which-key "workspace 5")
   ))
#+end_src
*** Winum
#+begin_src emacs-lisp
(use-package winum :ensure t :defer t :config (winum-mode))
#+end_src
*** Smooth Scroll
#+begin_src emacs-lisp
  (use-package smooth-scroll
    :ensure t
    :config
    (smooth-scroll-mode 1)
    ;; (setq smooth-scroll/vscroll-step-size 5)
  ;; (setq scroll-step            5
    )
    (setq scroll-margin 5)
     (setq scroll-conservatively most-positive-fixnum)
#+end_src

*** Eshell Autosuggest
#+begin_src emacs-lisp
(use-package esh-autosuggest
  :hook (eshell-mode . esh-autosuggest-mode)
  ;; If you have use-package-hook-name-suffix set to nil, uncomment and use the
  ;; line below instead:
  ;; :hook (eshell-mode-hook . esh-autosuggest-mode)
  :ensure t)
#+end_src

*** Rainbow
#+begin_src emacs-lisp
(use-package rainbow-mode :defer t :ensure t)
#+end_src

*** Writer Mode
#+BEGIN_SRC emacs-lisp
;(use-package poet-theme
  ;  :ensure t)
  ;(use-package olivetti
  ;  :ensure t)
  (use-package writeroom-mode
    :ensure t
    :defer t
    :config
   (setq writeroom-fullscreen-effect 'maximized))
  (defun writemode ()
    (interactive)
    (writeroom-mode)
    )
#+END_SRC
*** Ispell
#+BEGIN_SRC emacs-lisp
  (setq
    ispell-program-name
    "hunspell")

  (setq ispell-program-name "hunspell"          ; Use hunspell to correct mistakes
        ispell-dictionary   "english") ; Default dictionary to use -> ispell-hunspell-dictionary-alist
#+END_SRC

*** Htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize :ensure t :defer t)
#+END_SRC

*** Goggles
#+BEGIN_SRC emacs-lisp
(use-package evil-goggles :defer 1 :ensure t)
#+END_SRC
*** Helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful :ensure t
:defer t
:config 
(global-set-key (kbd "C-h f") #'helpful-callable)

(global-set-key (kbd "C-h v") #'helpful-variable)
(global-set-key (kbd "C-h k") #'helpful-key)
)
(use-package elisp-demos :ensure t
:config
(advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)
)
#+END_SRC

*** Evil Surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :defer 5
  :config
  (global-evil-surround-mode 1)
  (define-key evil-normal-state-map "s" nil)
  (evil-define-key 'visual evil-surround-mode-map "s" 'evil-surround-region)
)
#+END_SRC

*** Restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient :ensure t :defer t)
#+END_SRC
*** Hugo
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :ensure t            ;Auto-install the package from Melpa (optional)
  :defer t
  :after ox)
#+END_SRC

*** Fzf
#+begin_src emacs-lisp
(use-package "fzf" :ensure t :defer t :init (setenv "FZF_DEFAULT_COMMAND" "fd --type f") '(add-to-list 'load-path "~/.fzf"))
#+end_src

*** Emmet
Uses =C-j= to expand by default
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :ensure t
  :config
  (add-hook 'rjsx-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.)
  )
#+END_SRC
*** Zeal
Requires =yay zeal=
#+BEGIN_SRC emacs-lisp
;; (use-package zeal-at-point
  ;; :ensure t
  ;; )
#+END_SRC

*** Parinfer
#+BEGIN_SRC emacs-lisp
(use-package parinfer
  :ensure t
  :bind
  (("C-," . parinfer-toggle-mode))
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
            pretty-parens  ; different paren styles for different modes.
            evil           ; If you use Evil.
            smart-yank))   ; Yank behavior depend on mode.
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC

*** Iedit
#+BEGIN_SRC emacs-lisp
(use-package iedit :ensure t)
#+END_SRC
** Language-specific Packages
*** LSP
Also install:
- =npm install -g typescript=
- =npm install -g typescript-language-server=
- =npm install --global vscode-html-languageserver-bin=
- =npm install --global vscode-css-languageserver-bin=
- =yay python-language-server= (prefer the MS one)


- as an alternative to VS Code typescript integration: =npm install -g javascript-typescript-langserver=
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :hook (prog-mode . lsp)
  :commands lsp
  :config
  (setq lsp-server-install-dir "~/.emacs.d/lsp-server/")
  (setq lsp-prefer-flymake nil) ;; Prefer using lsp-ui (flycheck) over flymake.
  (setq lsp-enable-semantic-highlighting nil)
  (general-define-key
   :states 'normal
   :keymaps 'lsp-mode-map
   "gd" 'lsp-find-definition
   "gD" 'lsp-find-type-definition
   "gr" 'lsp-find-references
   "M-RET" 'lsp-execute-code-action
   )
  (use-package lsp-ui
    :ensure t
    :config
    (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)  
    (setq lsp-ui-sideline-ignore-duplicate t)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))
  (setq lsp-ui-doc-enable nil)
  (mapcar (lambda (f) (set-face-foreground f (face-foreground  font-lock-comment-face           )       ))
          '(lsp-ui-sideline-code-action lsp-ui-sideline-current-symbol lsp-ui-sideline-symbol lsp-ui-sideline-symbol-info))

  )

(use-package company-lsp :ensure t :config (push 'company-lsp company-backends))
#+END_SRC

*** Javascript
Install:
- =npm install --global prettier=
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode :ensure t :config 
(setq js-indent-level 2)
(add-to-list 'auto-mode-alist '("\\.js" . rjsx-mode))
)
(use-package prettier-js :ensure t :config
  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'rjsx-mode-hook 'prettier-js-mode))
#+END_SRC
*** Typescript
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode :ensure t)
#+END_SRC
*** Java
Install java & openJDK (go for the LTS versions) before with the archlinux-java command and install maven, the rest will be installed automatically
#+begin_src emacs-lisp
;; (use-package lsp-java :ensure t :after lsp)
#+end_src

*** Css
#+begin_src emacs-lisp
(setq css-indent-offset 2) ; css-mode
#+end_src

*** Go
The code below worked to load everything from .zshrc
#+BEGIN_SRC emacs-lisp
;;(defun load-env-vars () 
  ;;(let ((path (shell-command-to-string ". ~/.zshrc; echo -n $PATH")))
    ;;(setenv "PATH" path)
    ;;(setq exec-path (append (split-string-and-unquote path ":") exec-path)))
;;
  ;;(let ((gopath (shell-command-to-string ". ~/.zshrc; echo -n $GOPATH")))
    ;;(setenv "GOPATH" gopath)
    ;;(setq exec-path (append (split-string-and-unquote gopath ":") exec-path)))
(use-package exec-path-from-shell
  :ensure t
  :config (exec-path-from-shell-initialize))

#+END_SRC
Rest of go settings
#+begin_src emacs-lisp
;; go get: goflymake golang.org/x/tools/cmd/... godef gocode
(use-package go-mode :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  ;; :load-path "/tmp/elisp/go-mode"
  )

(use-package go-guru :ensure t :defer t)

(use-package flymake-go :ensure t :defer t
  ;; :config
  ;; (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  ;; :load-path "/tmp/elisp/go-mode"
  )

(use-package company-go :ensure t :defer t
  :after company
  :config
  (add-to-list 'company-backends 'company-go))

(defun my-go-mode-hook ()
  ;; (require 'go-guru)
  ;; (use-package go-guru
  ;; user-emacs-directory
  ;;  :load-path concat(user-emacs-directory "")"")

  (general-define-key
   :states 'normal
   :keymaps 'go-mode-map
   "gd" 'godef-jump
   "gh" 'godef-describe
   )

  (general-define-key
   :states '(normal motion)
   :keymaps 'go-mode-map
   :prefix "SPC"
   "m" '(go-guru-map :which-key "Major Mode[Go]")
   )
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save) ; gofmt before every save
  )

(add-hook 'go-mode-hook (lambda ()
                          (set (make-local-variable 'company-backends) '(company-go))
                          (company-mode)))

(add-hook 'go-mode-hook #'go-guru-hl-identifier-mode)
;(add-hook 'go-mode-hook #'load-env-vars)
(add-hook 'go-mode-hook 'my-go-mode-hook)
(add-hook 'go-mode-hook (lambda () (whitespace-mode -1)))
#+end_src

*** C/C++
C Language Server
#+BEGIN_SRC emacs-lisp
(use-package ccls
  :ensure t
  :config
  (setq ccls-executable "ccls")
  (setq lsp-prefer-flymake nil)
  (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
  :hook ((c-mode c++-mode objc-mode) .
         (lambda () (require 'ccls) (lsp))))
#+END_SRC

Note: Switched to ccls as seen above the below might be outdated.
# Run =lsp-cquery-enable= when in a c/c++ file (or add hook).
Look at this for debugging https://www.gnu.org/software/emacs/manual/html_node/emacs/GDB-Graphical-Interface.html
#+BEGIN_SRC emacs-lisp
    (add-hook 'c-mode-hook
      (lambda ()
        (set (make-local-variable 'compile-command)
             (format "gcc -std=c99 -Wall -g %s -o %s" (buffer-name) (file-name-sans-extension (buffer-name))))))

    (add-hook 'c++-mode-hook
      (lambda ()
        (set (make-local-variable 'compile-command)
             (format "g++ -g %s -o %s" (buffer-name) (file-name-sans-extension (buffer-name))))))

    ;; might want to activate gdb-many-windows by default
    (setq gdb-many-windows t)

  (general-define-key
     :states '(normal motion)
     :keymaps 'c-mode-base-map
     :prefix "SPC"
     "m" '(:ignore t :which-key "Major Mode[C/C++]")
     "md" '(gdb :which-key "Debug")
     )

  ;; (defun compileAndDebug ()
  ;;   (interactive)
  ;;   (progn
  ;;     (compile compile-command)
      ;; (gdb (concat default-directory " -i=mi " (file-name-sans-extension (buffer-name))))
      ;; (gdb (concat (file-name-sans-extension (buffer-name)) " -i=mi"))
    ;;   )
    ;; )
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
;; (use-package elpy :defer t :config (elpy-enable))
(add-hook 'python-mode-hook 'flycheck-mode)

#+END_SRC

*** C#
If it doesnt work start C# project with vs code, it will get the dependecies.
Most likely: OmniSharp for Linux, .Net Core Debugger, -> msbuild-stable (<--!!!)
#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode :ensure t :defer t)
;  (use-package omnisharp
;    :commands csharp-mode
;    :config
;    (add-hook 'csharp-mode-hook 'omnisharp-mode)
;    (add-to-list 'company-backends 'company-omnisharp))

  (use-package omnisharp
    :ensure t
    :defer t
    :after company
    :config
    (setq omnisharp-company-ignore-case nil)
    (setq omnisharp-company-sort-results nil)
;;(define-key omnisharp-mode-map (kbd ".") 'omnisharp-add-dot-and-auto-complete)
(define-key omnisharp-mode-map (kbd "<C-SPC>") 'omnisharp-auto-complete)
    (add-hook 'csharp-mode-hook
              (lambda ()
                (evil-define-key 'normal omnisharp-mode-map (kbd "g d") 'omnisharp-go-to-definition)
                ))
    (add-hook 'csharp-mode-hook 'omnisharp-mode)
    (add-hook 'csharp-mode-hook 'flycheck-mode)

    (add-hook 'csharp-mode-hook (lambda () (whitespace-mode -1)))
    (add-to-list 'company-backends 'company-omnisharp))
#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :defer t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
    ;; :config     (add-hook markdown-mode-hook 'outline-minor-mode))
#+END_SRC

*** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t
    :defer t
    :config
    (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
    (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
    (add-to-list 'interpreter-mode-alist '("lua" . lua-mode)))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key global-map [(S-return)] 'add-semicolon)
#+END_SRC

** Program Mode
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'company-mode)
(add-hook 'prog-mode-hook 'electric-pair-mode)
(add-hook 'prog-mode-hook 'evil-commentary-mode)
(add-hook 'prog-mode-hook 'column-number-mode)
;;(add-hook 'prog-mode-hook 'yas-global-mode)
                                        ;(add-hook 'prog-mode-hook 'yas-minor-mode)
;;(add-hook 'prog-mode-hook 'highlight-indentation-mode)
;; (add-hook 'prog-mode-hook 'indent-guide-mode)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(add-hook 'prog-mode-hook 'winner-mode)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
;;(add-hook 'prog-mode-hook 'whitespace-mode)
(add-hook 'prog-mode-hook 'show-paren-mode)
(add-hook 'prog-mode-hook 'hl-line-mode)
(add-hook 'prog-mode-hook 'evil-goggles-mode)
#+end_src

* Keybindings 
#+begin_src emacs-lisp
;;(global-set-key (kbd "<escape>")      'keyboard-escape-quit) ;; send quit signal with escape
;;(global-set-key (kbd "<escape>")      'keyboard-quit) ;; send quit signal with escape
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))
; Todo fix for transient-mode-map - >'transient-quit-one

;;(global-unset-key (kbd "SPC")) ;; hinders insertion of space in ins mode
(global-unset-key [f2])
#+end_src

** General.el
#+begin_src emacs-lisp
(general-define-key
 ;; replace default keybindings
 :states '(normal emacs)
                                        ;"C-s" 'swiper             ; search for string in current buffer
 "C-s" 'evil-search-forward             ; search for string in current buffer
 ;;   "C-p" 'company-select-previous             ; search for string in current buffer
 ;;   "C-n" 'company-select-next             ; search for string in current buffer
                                        ;"/" 'swiper             ; search for string in current buffer
 "/" 'evil-search-forward             ; search for string in current buffer
                                        ;"/" 'evil-search-forward             ; search for string in current buffer
 "M-x" 'counsel-M-x        ; replace default M-x with ivy backend
 "N" 'evil-search-previous
 "n" 'evil-search-next
 "\\" 'evil-ex-nohighlight
 "<f2>" 'iedit-mode
 ;; "C-w" 'evil-delete-buffer
 )

(general-def :states '(normal motion emacs) "SPC" nil)
(general-def :keymaps '(compilation-mode-map ess-help-mode-map info-mode-map magit-diff-mode-map magit-status-mode-map dired-mode-map) "SPC" nil)
(general-def :keymaps '(compilation-mode-map magit-diff-mode-map magit-status-mode-map) "$" nil)

(general-define-key
 :states '(normal motion emacs)
 :prefix "SPC"

 ;; simple command
 "x" 'counsel-M-x        ; replace default M-x with ivy backend
 "TAB" '(mode-line-other-buffer :which-key "prev buffer")
 "SPC" '(avy-goto-word-or-subword-1  :which-key "go to char")
 "C-'" 'avy-goto-word-1
 "qq"  '(save-buffers-kill-terminal :which-key "Save all & quit")
 "RET" '(add-semicolon :which-key "Insert ; at eol")
 ;;"/" '(counsel-ag :which-key "Counsel ag search [everywhere]")
                                        ;"/" '(evil-search-forward :which-key "Swiper search")
 "/" '(swiper :which-key "Swiper search")
 ;; "'" '(ansi-term "/usr/bin/zsh" :which-key "popup shell")
 "'" '(popup-shell :which-key "popup shell")

 ;; Applications
 "a" '(:ignore t :which-key "Applications")
 "aa" '(ag :which-key "Ag")
 "ae" '(eshell :which-key "eshell")
 "ah" '(hackernews :which-key "Hackernews")
 "ar" '(ranger :which-key "Ranger")
 "at" '(open-termite :which-key "Termite")
 "ag" '(google-translate-at-point :which-key "Google Translate")
 "ac" '(compile :which-key "compile")
 "ar" '(recompile :which-key "recompile")
 "as" '(ispell-word :which-key "spell check")
 "ao" '(occur :which-key "occur") ;; example usage function\|var
 "ad" 'dired
 ;; "az" '(zeal-at-point-search :which-key "Zeal Docs") ;; example usage function\|var

 ;; Buffer
 "b" '(:ignore t :which-key "Buffer")
 ;; "bb" '(ivy-switch-buffer :which-key "Change buffer")
 "bb" '(counsel-ibuffer :which-key "Change buffer")
 "bd" '(kill-buffer :which-key "kill buffer")
 "bD" '(kill-some-buffers :which-key "kill some buffers")
 "bp" '(switch-to-prev-buffer :which-key "prev buffer")
 "bn" '(switch-to-prev-buffer :which-key "next buffer")

 "B" '(:ignore t :which-key "Bookmarks")
 "Bl" '(list-bookmarks :which-key "List Bookmarks")

 "c" '(kill-this-buffer :which-key "kill current buffer")


 "dd"  '(kill-buffer-and-window :which-key "Kill buffer and window")

 ;; Flymake
 ;; "e" '(:ignore t :which-key "Flymake")
 ;; "eh" '(flymake-popup-current-error-menu :which-key "show error msg")
 ;; "en" '(flymake-goto-next-error :which-key "next error")
 ;; "ep" '(flymake-goto-prev-error :which-key "prev error")

 ;; Flycheck
 "e" '(:ignore t :which-key "Flycheck")
 "eh" '(flycheck-list-errors :which-key "show error msg")
 "el" '(flycheck-list-errors :which-key "list errors")
 "en" '(flycheck-next-error :which-key "next error")
 "ep" '(flycheck-previous-error :which-key "prev error")

 ;; Files
 "f" '(:ignore t :which-key "Files")
 "ff" '(counsel-find-file :which-key "find file")
 "fo" '(find-file-other-window :which-key "find file other window")
 "fr"	'(counsel-recentf   :which-key "recent files")
 "fs" '(save-buffer :which-key "save file")
 "f/" '(swiper :which-key "search in file")
 ;; "ft" '(treemacs :which-key "toggle treemacs")
 ;;"ft" '(neotree-toggle :which-key "toggle sidebar")
 ;; "ft" '(sired :which-key "toggle sidebar")
 "ft" '(dired-toggle :which-key "toggle sidebar")

 ;; Git
 "g" '(:ignore t :which-key "Git")
 "gs" '(magit-status :which-key "status")
 "gu" '(smerge-keep-upper :which-key "keep upper")
 "gl" '(smerge-keep-lower :which-key "keep lower")
 "gb" '(smerge-keep-all :which-key "keep both")
 "gn" '(smerge-next :which-key "next conflict")

 ;; Help
 "h" '(:ignore t :which-key "Help")
 "hh" '(help-for-help-internal :which-key "open help")
 
 ;;
 "i" '(:ignore t :which-key "I")
 "is" '(yas-insert-snippet :which-key "Insert snippet")

 ;; LSP
 "l" '(:ignore t :which-key "l")
 "lf" '(lsp-format-buffer :which-key "LSP format")
 "ll" '(lsp-execute-code-action :which-key "LSP code action")
 "lr" '(lsp-rename :which-key "LSP rename")

 ;; Projects
 "p" '(:ignore t :which-key "Projects")
 "pf" '(counsel-git :which-key "Find file in git project")
 ;; "pf" '(counsel-fzf :which-key "Find file in git project")
 "p/" '(projectile-ag :which-key "Projectile ag search [in project]")
 ;; "pp" '(projectile-find-dir :which-key "Switch directory (project)")
 "pp" '(counsel-fzf :which-key "Switch directory (project)")
 "pb" '(projectile-switch-to-buffer :which-key "Switch project buffer")
 "ps" '(projectile-switch-project :which-key "Switch project")

 ;; Windows
 "w" '(:ignore t :which-key "Windows")
 "1" '(winum-select-window-1 :which-key "window 1")
 "2" '(winum-select-window-2 :which-key "window 2")
 "3" '(winum-select-window-3 :which-key "window 3")
 "4" '(winum-select-window-4 :which-key "window 4")
 "5" '(winum-select-window-5 :which-key "window 5")
 "6" '(winum-select-window-6 :which-key "window 6")
 "ws" '(split-window-below :which-key "Horizontal split")
 "wv" '(split-window-right :which-key "Vertical split")
 "wd" '(evil-window-delete :which-key "close window")
 "wD" '(eyebrowse-close-window-config :which-key "close workspace")
 "ww" '(ace-window :which-far-key "ace-window")
 "wm" '(delete-other-windows :which-far-key "next window")
 "wu" '(winner-undo :which-key "winner undo")
 "wr" '(winner-redo :which-key "winner redo")
 "wh" '(evil-window-left :which-key "left")
 "wH" '(evil-window-move-far-left :which-key "move left")
 "wj" '(evil-window-down :which-key "down")
 "wJ" '(evil-window-move-very-bottom :which-key "move down")
 "wk" '(evil-window-up :which-key "up")
 "wK" '(evil-window-move-very-top :which-key "move up")
 "wl" '(evil-window-right :which-key "right")
 "wL" '(evil-window-move-far-right :which-key "move right")
 "w+" '(evil-window-increase-height 30 :which-key "increase height")
 "w-" '(evil-window-decrease-height 30 :which-key "decrease height")
 "wc" '(eyebrowse-create-window-config :which-key "create workspace")
 "wn" '(eyebrowse-next-window-config :which-key "next workspace")
 "wp" '(eyebrowse-prev-window-config :which-key "prev workspace")
 ;; (enlarge-window 15)

 ;; Org Mode
 "o" '(:ignore t :which-key "Org")
 "oa" '(org-agenda :which-key "agenda")
 "oc" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :which-key "config")
 "on" '((lambda () (interactive) (find-file "~/.notes.org")) :which-key "notes (capture)")
                                        ;     "ol" '((lambda () (interactive) (find-file "~/personal/logbook.org")) :which-key "logbook")
 "oq" '(org-capture :which-key "quick capture")
 )

#+end_src

Keybindings for outline mode:
#+BEGIN_SRC emacs-lisp
(general-define-key
   :states 'normal
   :keymaps 'outline-minor-mode-map
   "TAB" 'outline-toggle-children
   "<backtab>" 'outline-hide-body
   )
#+END_SRC

#+begin_src emacs-lisp
(use-package web-mode :ensure t
  :defer t
  :init
  (setq web-mode-markup-indent-offset 2) ; web-mode, html tag in html file
  (setq web-mode-css-indent-offset 2)    ; web-mode, css in html file
  (setq web-mode-code-indent-offset 2) ; web-mode, js code in html file
  (add-to-list 'auto-mode-alist '("\\.vue" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.json" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html" . web-mode))

  (general-define-key
   :states 'normal
   :keymaps 'web-mode-map
   "%" 'web-mode-tag-match
   )
  (general-define-key
   :states '(normal motion)
   :keymaps 'web-mode-map
   :prefix "SPC"
   "m" '(:ignore t :which-key "Major Mode[Web]")
   "me" '(web-mode-dom-errors-show :which-key "Show DOM errors")
   )
  )

;; (defun my-web-mode-hook ()
;;   "Hooks for Web mode."
;;   (setq web-mode-markup-indent-offset 2)
;; )
;; (add-hook 'web-mode-hook  'my-web-mode-hook)
#+end_src

* Temporary
#+begin_src emacs-lisp
(evil-add-command-properties #'tide-jump-to-definition :jump t)
(evil-add-command-properties #'omnisharp-go-to-definition :jump t)
;;(evil-add-command-properties #'evil-previous-line :jump t)
;;(evil-add-command-properties #'evil-next-line :jump t)

                                        ;(set-face-bold-p 'bold nil) ; disable bold font (didnt work)
(mapc ; disable bold font
 (lambda (face)
   (set-face-attribute face nil :weight 'normal :underline nil))
 (face-list))
 
(use-package google-translate :ensure t :defer t
  :config
  )
;; Doesnt work inside :config
(setq google-translate-default-target-language "en")
(setq google-translate-default-source-language "de")
; Replace the function below in source code for now..
;; (defun google-translate--search-tkk () (list 430675 2721866130))
;; (with-eval-after-load "google-translate"
;; (advice-add 'google-translate--search-tkk :override
;;               (lambda () (list 430675 2721866130)))
;;   )


(mapc ; disable bold font
 (lambda (face)
   (set-face-attribute face nil :weight 'normal :underline nil))
 (face-list))

#+end_src
** Org Mode Epub
#+BEGIN_SRC emacs-lisp
(use-package ox-epub :ensure t :defer t)
#+END_SRC
* Experimental
** Org Mode Code Listings
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "listings" nil))
(setq org-latex-listings t)
(setq org-latex-listings-options '(("breaklines" "true")))
#+END_SRC
** Testing
Function to create (temporary buffers)
#+BEGIN_SRC emacs-lisp
(defun create-buffer(name)
  (interactive "sEnter name for new buffer: ")
  (switch-to-buffer
   (find-file (concat "/tmp/" name))))
#+END_SRC
todo : work this in
(add-hook 'comint-exec-hook 
(lambda () (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)))
#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
;;  (defface special-comment '((t (:background "#fafafa" :foreground "#fafafa"))) "Green")
(defface extra-comment '((t (:background "#fbf8ef" :foreground "#fafafa"))) "Green")

;;(defface extra-comment '((t (:foreground "#ffffff"))) "Cyan")

(font-lock-add-keywords
 'prog-mode '(("\\(\\b\\|[[:graph:]]\\)\\( \\)" (1 'extr-comment -1) (2 'extra-comment t))))
                                        ;'typescript-mode '(("\\(\\b\\|[[:graph:]]\\)\\( \\)" (1 'extr-comment -1) (2 'extra-comment t))))

(setq whitespace-space-regexp "\\(^ +\\| +$\\)") ; defines what should be matched as space, whitespaces that are not matched get default styling..

(setq whitespace-display-mappings
      '((space-mark   32     [183]     [46]) ; space
        (space-mark   160    [164]     [95]) ; hard space
        (newline-mark ?\n    [?\n]) ; remove $ to not display it
        (tab-mark     ?\t    [?\u00BB ?\t] [?\\ ?\t])))


(defvar my-prev-whitespace-mode nil)
(make-variable-buffer-local 'my-prev-whitespace-mode)
(defun pre-popup-draw ()
  "Turn off whitespace mode before showing company complete tooltip"
  (if whitespace-mode
      (progn
        (setq my-prev-whitespace-mode t)
        (whitespace-mode -1)
        (setq my-prev-whitespace-mode t))))
(defun post-popup-draw ()
  "Restore previous whitespace mode after showing company tooltip"
  (if my-prev-whitespace-mode
      (progn
        (whitespace-mode 1)
        (setq my-prev-whitespace-mode nil))))
(advice-add 'company-pseudo-tooltip-unhide :before #'pre-popup-draw)
(advice-add 'company-pseudo-tooltip-hide :after #'post-popup-draw)


                                        ;   (add-to-list 'custom-theme-load-path (file-name-as-directory "~/Dev/one-light-theme/"))

                                        ;   (load-theme 'one-light t t)

                                        ;   (enable-theme 'one-light)

;; Regex to set color for single whitespaces
                                        ;(mapc (lambda (mode)
                                        ;(font-lock-add-keywords
                                        ;mode '(("\\(\\b\\|[[:graph:]]\\)\\( \\)" (1 'extr-comment -1) (2 'extra-comment t)))))
                                        ;'(text-mode latex-mode mhtml-mode html-mode emacs-lisp-mode typescript-mode js2-mode  js-mode css-mode scss-mode go-mode
                                        ;texinfo-mode))
                                        ;(set-cursor-color "#7B1FA2")

;;   look into term (eshell replace)

                                        ;(use-package telephone-line
                                        ;:ensure t
                                        ;:config
;; (setq telephone-line-primary-left-separator 'telephone-line-abs-left
;; telephone-line-primary-right-separator 'telephone-line-abs-right)
                                        ;
                                        ;(telephone-line-defsegment my-vc-info ()
                                        ;(when vc-mode
                                        ;(cond
                                        ;((string-match "Git[:-]" vc-mode)
                                        ;(let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
                                        ;(concat "" (format " %s" branch))))
                                        ;((string-match "SVN-" vc-mode)
                                        ;(let ((revision (cadr (split-string vc-mode "-"))))
                                        ;(concat "" (format "SVN-%s" revision))))
                                        ;(t (format "%s" vc-mode)))))
                                        ;
                                        ;(telephone-line-defsegment* my-airline-position-segment (&optional lines columns)
                                        ;(let* ((l (number-to-string (if lines lines 1)))
                                        ;(c (number-to-string (if columns columns 2))))
                                        ;(if (eq major-mode 'paradox-menu-mode)
                                        ;(telephone-line-raw mode-line-front-space t)
                                        ;(concat " " "%" l "l:%" c "c"))))
                                        ;
                                        ;(setq telephone-line-lhs
                                        ;'((evil   . (telephone-line-evil-tag-segment))
                                        ;(accent . (my-vc-info
                                        ;telephone-line-process-segment))
                                        ;(nil    . (telephone-line-buffer-segment
                                        ;telephone-line-projectile-segment))))
                                        ;(setq telephone-line-rhs
                                        ;'((nil    . (telephone-line-flycheck-segment
                                        ;telephone-line-misc-info-segment))
                                        ;(accent . (telephone-line-major-mode-segment))
                                        ;(nil    . (telephone-line-hud-segment
                                        ;my-airline-position-segment))))
                                        ;
                                        ;(setq display-time-format "%b %d %a %R")
                                        ;(setq display-time-default-load-average nil)
                                        ;(setq display-time-use-mail-icon t)
                                        ;(setq display-time-mail-file t)
                                        ;(display-time-mode t)
                                        ;
                                        ;(telephone-line-mode 1))
#+END_SRC
** Nikola to Hugo
Helper Functions to export nikola blog posts to hugo blog post format
#+BEGIN_SRC emacs-lisp :tangle no
(defun export-files-to-hugo-misc-section ()
  (interactive)
  (export-numbered-files-to-hugo "misc"))

(defun export-files-to-hugo-db-section ()
  (interactive)
  (export-numbered-files-to-hugo "db"))

(defun export-files-to-hugo-ds-section ()
  (interactive)
  (export-numbered-files-to-hugo "ds"))

(defun export-files-to-hugo-algos-section ()
  (interactive)
  (export-numbered-files-to-hugo "algos"))

(defun export-files-to-hugo-cs1-section ()
  (interactive)
  (export-numbered-files-to-hugo "cs1"))

(defun export-numbered-files-to-hugo(subsection)
    "Exports all numbered files in current dir to (hugo) markdown"
    (export-files-to-hugo
     "[0-9].*" subsection))

;; (defun export-files-to-hugo (&optional regex)
;;   "Exports all files in current dir that match 'regex' to (hugo) markdown"
;;   (mapc 'trigger-export
;;         (directory-files default-directory nil regex)))

(defun export-files-to-hugo (&optional regex subsection)
  "Exports all files in current dir that match 'regex' to (hugo) markdown"
  (mapc (lambda (file)
        (funcall #'trigger-export file subsection))
      (directory-files default-directory nil regex)))
  ;; (mapc 'trigger-export
  ;;       (directory-files default-directory nil regex)))

(defun trigger-export(f subsection)
  (find-file f)
  (nikola-to-hugo-header subsection)
  (save-buffer)
  (org-hugo-export-to-md)
  (kill-buffer (current-buffer))
  (progn (setq kill-ring nil) (garbage-collect))
)

(defun nikola-to-hugo-header(subsection)
  (interactive)
  (nikola-kill-title)
  (nikola-append-kill-date)

  (search-forward "#+END_COMMENT")
  (delete-region (point-min) (point))
  (hugo-insert-header subsection)
  (goto-char (point-min))
  (kill-whole-line)
  )

(defun nikola-kill-title ()
  (goto-char (point-min))
  (search-forward "title:")
  (kill-line)
  (kill-append "#+TITLE:" t))

(defun nikola-append-kill-date ()
  (goto-char (point-min))
  (search-forward "date:")
  (kill-append "#+DATE:" nil)
  (append-next-kill)
  (kill-line))

(defun hugo-insert-header (subsection)
  (setq hugo-header
        `("#+HUGO_BASE_DIR: ../../../"
          ,(concat "#+HUGO_SECTION: uni/" subsection)
          "#+HUGO_DRAFT: false"
          "#+HUGO_AUTO_SET_LASTMOD: true"
          ""))

  (hugo-insert-date-title)
  (mapc 'insert-line hugo-header)
  )

(defun insert-line (str)
  (open-line 1)
  (next-line 1)
  (insert str))

(defun hugo-insert-date-title ()
  (open-line 1)
  (next-line 1)
  (yank)
  (search-backward "#")
  (open-line 1)
  (next-line 1))
#+END_SRC

** Eshell Customization
#+begin_src emacs-lisp
(defmacro with-face (str &rest properties)
  `(propertize ,str 'face (list ,@properties)))

(defun shk-eshell-prompt ()
  ;; (let ((header-bg "#fff"))
  (let ((header-bg (face-attribute 'default :background)))
    (concat
     (with-face (concat (eshell/pwd) " ") :background header-bg)
     (with-face (format-time-string "(%Y-%m-%d %H:%M) " (current-time)) :background header-bg :foreground "#888")
     (with-face
      (or (ignore-errors (format "(%s)" (vc-responsible-backend default-directory))) "")
      :background header-bg)
     (with-face "\n" :background header-bg)
     ;; (with-face user-login-name :foreground "#0184bc")
     (with-face user-login-name :foreground "#ff4ea3")
     "@"
     (with-face "gaia" :foreground "#d18aff")
     ;; (with-face "gaia" :foreground "#d75f00")
     (if (= (user-uid) 0)
         (with-face " #" :foreground "red")
       " $")
     " ")))
(setq eshell-prompt-function 'shk-eshell-prompt)
(setq eshell-highlight-prompt nil)
#+end_src
** Emacs Server
#+BEGIN_SRC emacs-lisp
(server-force-delete)
(server-start)
#+END_SRC

** EDBI
#+BEGIN_SRC emacs-lisp
;; (use-package edbi :ensure t)
;; (use-package company-edbi :ensure t
;; :config (add-to-list 'company-backends 'company-edbi)

;; )
#+END_SRC
** SQLi
#+BEGIN_SRC emacs-lisp
(add-hook 'sql-interactive-mode-hook 'auto-complete-mode)
;; (define-key sql-interactive-mode-map (kbd "<C-SPC>") 'ac-start)
;; (define-key sql-interactive-mode-map (kbd "<C-N>") 'ac-next)
;; (define-key sql-interactive-mode-map (kbd "<C-P>") 'ac-previous)

(defun my-ac-mode-hook ()
  (define-key sql-interactive-mode-map (kbd "C-SPC") #'ac-start)
  (define-key sql-interactive-mode-map (kbd "C-n") #'ac-next)
  (define-key sql-interactive-mode-map (kbd "C-p") #'ac-previous))

(add-hook 'sql-interactive-mode-hook  'my-ac-mode-hook)


;; (defun ry/company-sql-upper-lower (&rest lst)
;;   (nconc (sort (mapcar 'upcase lst) 'string<) lst))

;; (defvar ry/company-sql-alist
;;   `(("DBASE1"               ;; Database name w/o environment suffix.
;;      "DBASE1DM" "DBASE1UM"  ;; Database name with environment suffix.
;;      "SCHEMA1" "SCHEMA2"
;;      "TABLE1" "TABLE2"
;;      "COLUMN1" "COLUMN2")
;;     ("DBASE2"
;;      "DBASE2DM" "DBASE2UM"
;;      "SCHEMA1" "SCHEMA2"
;;      "TABLE1" "TABLE2"
;;      "COLUMN1" "COLUMN2"))
;;     "Alist mapping sql-mode to candidates.")

;; (defun ry/company-sql (command &optional arg &rest ignored)
;;   "`company-mode' back-end for SQL mode based on database name."
;;   (interactive (list 'interactive))
;;   (cl-case command
;;     (interactive (company-begin-backend 'ry/company-sql))
;;     (prefix (and (assoc (substring (buffer-name (current-buffer)) 4 -3) ry/company-sql-alist)
;;                  (not (company-in-string-or-comment))
;;                  (or (company-grab-symbol) 'stop)))
;;     (candidates
;;      (let ((completion-ignore-case t)
;;            (symbols (cdr (assoc (substring (buffer-name (current-buffer)) 4 -3) ry/company-sql-alist))))       
;;        (all-completions arg (if (consp symbols)
;;                                 symbols
;;                               (cdr (assoc symbols company-sql-alist))))))
;;     (sorted t)))

;; (defun ry/sql-open-database (database username password)
;;   "Open a SQLI process and name the SQL statement window with the name provided."
;;   (interactive (list
;;                 (read-string "Database: ")
;;                 (read-string "Username: ")
;;                 (read-passwd "Password: ")))
;;   (let ((u-dbname (upcase database)))
;;     (setq sql-set-product "mariadb")

;;     (sql-mariadb u-dbname)
;;     (sql-rename-buffer u-dbname)
;;     (setq sql-buffer (current-buffer))
;;     (sql-send-string (concat "CONNECT TO " database " USER " username " USING " password ";"))

;;     (other-window 1)
;;     (switch-to-buffer (concat "*DB:" u-dbname "*"))
;;     (sql-mode)
;;     (sql-set-product "mariadb")
;;     (setq sql-buffer (concat "*SQL: " u-dbname "*"))))

;; (add-to-list 'company-backends 'ry/company-sql) (add-to-list 'company-backends 'ry/company-sql-alist)
#+END_SRC
** Keepass
#+BEGIN_SRC emacs-lisp
(require 'ivy)
          

(defvar counsel-keepassxc-database-file (substitute-in-file-name "$HOME/library/docs/passwords.kdbx") "Keepassxc password database file.")

(defun counsel-keepassxc--candidates (master-password)
  "Return list of keepassxc entries, MASTER-PASSWORD to open database."
  (unless counsel-keepassxc-database-file
    (signal
     'file-error
     (list "Opening `counsel-keepassxc-database-file'" "No such readable file"
           counsel-keepassxc-database-file)))
  (let* ((args)
         (entries
          (with-temp-buffer
            (insert master-password)
            (setq args (list (point-min)
                             (point-max)
                             "keepassxc-cli"
                             t t nil
                             "locate"
                             (expand-file-name counsel-keepassxc-database-file)
                             "/"))
            (if (not (eq 0 (apply 'call-process-region args)))
                (error
                 "Error: execute keepassxc-cli locate failed"))
            (split-string (buffer-string) "\n")))
         (candidates
          (remove nil
                  (mapcar
                   (lambda (entry)
                     (unless (string-prefix-p "Insert password to unlock"
                                              entry)
                       (list entry master-password)))
                   entries))))
    candidates))

(defun counsel-keepassxc--entry-parse (&optional entry-path)
  "Parse entry in current buffer, ENTRY-PATH for the path of the entry."
  (save-excursion
    (goto-char (point-min))
    (let ((entry)
          (fields)
          (filters '("UserName" "Password" "URL" "Notes")))
      (if entry-path
          (add-to-list 'entry (cons "Title" entry-path))
        (add-to-list 'filters "Title"))
      (while (not (eobp))
        (setq fields (split-string
                      (buffer-substring
                       (point)
                       (point-at-eol))
                      ": "))
        (if (member (car fields) filters)
            (add-to-list
             'entry
             (cons (car fields)
                   (string-trim (string-join (cdr fields) ": ")))
             t))
        (beginning-of-line 2))
      entry)))

(defun counsel-keepassxc--entry-get (candidate)
  "Get entry match CANDIDATE."
  (with-temp-buffer
    (insert (cadr candidate))
    (let* ((entry-path (car candidate))
           (args (list (point-min)
                       (point-max)
                       "keepassxc-cli"
                       t t nil
                       "show"
                       (expand-file-name
                        counsel-keepassxc-database-file)
                       entry-path)))
      (if (not (eq 0 (apply 'call-process-region args)))
          (error
           "Error: execute keepassxc-cli show failed"))
      (counsel-keepassxc--entry-parse entry-path))))

(defun counsel-keepassxc--copy-password (candidate)
  "Copy password of CANDIDATE into current buffer."
  (kill-new (assoc-default "Password" (counsel-keepassxc--entry-get candidate) nil "")))

(defun counsel-keepassxc--copy-username (candidate)
  "Copy username of CANDIDATE into current buffer."
  (kill-new (assoc-default "UserName" (counsel-keepassxc--entry-get candidate) nil "")))

(defun counsel-keepassxc--copy-url (candidate)
  "Copy url of CANDIDATE into current buffer."
  (kill-new (assoc-default "URL" (counsel-keepassxc--entry-get candidate) nil "")))

(defun counsel-keepassxc--copy-notes (candidate)
  "Copy notes of CANDIDATE into current buffer."
  (kill-new (assoc-default "Notes" (counsel-keepassxc--entry-get candidate) nil "")))

(defun counsel-keepassxc--entry-commit ()
  "Commit added or edited entry."
  (interactive)
  (let* ((entry (counsel-keepassxc--entry-parse))
         (return nil)
         (entry-buffer (current-buffer))
         (generates (split-string (assoc-default "Password" entry nil "") "Generate"))
         (args nil)
         (action (buffer-local-value 'keepassxc-action entry-buffer))
         (candidate (buffer-local-value 'keepassxc-candidate entry-buffer))
         (delete-old nil))
    (unless (or (string= action "edit")
                (string= action "add"))
      (error
       "Error: commit not allowed when %s keepassxc entry"
       action))
    ;;;; If title changed when editing, treat as add a new entry and delete old entry.
    (when (and (string= action "edit")
               (not (string= (string-trim-left (car candidate) "/")
                             (string-trim-left (assoc-default "Title" entry nil "") "/"))))
      (setq action "add")
      (setq delete-old t))
    (with-temp-buffer
      (insert (cadr (buffer-local-value 'keepassxc-candidate entry-buffer)))
      (insert "\n")
      (when (< (length generates) 2)
        (insert (assoc-default "Password" entry nil ""))
        (insert "\n"))
      (setq args
            (list
             (point-min)
             (point-max)
             "keepassxc-cli"
             t nil t
             action
             (expand-file-name counsel-keepassxc-database-file)
             (assoc-default "Title" entry nil "")
             "-u"
             (assoc-default "UserName" entry nil "")
             "--url"
             (assoc-default "URL" entry nil "")))
      (if (< (length generates) 2)
          (add-to-list 'args "-p" t)
        (add-to-list 'args "-g" t)
        (when (> (string-to-number (second generates)) 0)
          (add-to-list 'args "-l" t)
          (add-to-list 'args (second generates) t)))
      (setq return (apply 'call-process-region args)))
    (if (not (eq return 0))
        (error
         "Error: execute keepassxc-cli %s failed"
         action)
      (when delete-old (counsel-keepassxc--delete candidate))
      (kill-buffer entry-buffer)
      (message "keepassxc-cli %s entry \"%s\" succeed"
               action
               (assoc-default "Title" entry nil "")))))

(defun counsel-keepassxc--entry-edit ()
  "Enter edit entry mode."
  (interactive)
  (unless (eq major-mode 'counsel-keepassxc-entry-mode)
    (error
     "Error: major-mode must be `counsel-keepassxc-entry-mode'"))
  (let ((candidate keepassxc-candidate))
    (kill-buffer (current-buffer))
    (counsel-keepassxc--edit candidate)))

(defun counsel-keepassxc--entry-abort ()
  "Abort added or edited entry."
  (interactive)
  (kill-buffer (current-buffer)))

(defun counsel-keepassxc--entry-next-field ()
  "Move to next field."
  (interactive)
  (unless (search-forward ": " nil t)
    (goto-char (point-min))
    (search-forward ": ")))

(setq counsel-keepassxc-entry-highlights '(("^Password: Generate[0-9]*" . font-lock-keyword-face)
                                           ("^Title: \\|^UserName: \\|^Password: \\|^URL: \\|^Notes: "
                                            . font-lock-type-face)))

(defvar counsel-keepassxc-entry-mode-map (make-sparse-keymap)
  "Keymap for `counsel-keepassxc-entry-mode'.")
(define-key counsel-keepassxc-entry-mode-map (kbd "C-c C-c") 'counsel-keepassxc--entry-commit)
(define-key counsel-keepassxc-entry-mode-map (kbd "C-c C-e") 'counsel-keepassxc--entry-edit)
(define-key counsel-keepassxc-entry-mode-map (kbd "C-c C-k") 'counsel-keepassxc--entry-abort)
(define-key counsel-keepassxc-entry-mode-map (kbd "TAB") 'counsel-keepassxc--entry-next-field)

(define-derived-mode counsel-keepassxc-entry-mode text-mode
  "counsel-keepassxc-entry-mode"
  "major mode for editing keepassxc entry."
  (setq font-lock-defaults '(counsel-keepassxc-entry-highlights)))

(defun counsel-keepassxc--view (&optional candidate)
  "View entry, CANDIDATE is the entry to view."
  (let ((buffer (generate-new-buffer "*keepassxc-view*"))
        (entry (counsel-keepassxc--entry-get candidate)))
    (with-current-buffer buffer
      (counsel-keepassxc-entry-mode)
      (insert (format
               "View Keepassxc Entry.\n========================\nTitle: %s\nUserName: %s\nPassword: %s\nURL: %s\nNotes: %s\n"
               (assoc-default "Title" entry nil "")
               (assoc-default "UserName" entry nil "")
               (assoc-default "Password" entry nil "")
               (assoc-default "URL" entry nil "")
               (assoc-default "Notes" entry nil "")))
      (forward-line -5)
      (goto-char (point-at-eol))
      (read-only-mode)
      (set (make-local-variable 'keepassxc-candidate) candidate)
      (set (make-local-variable 'keepassxc-action) "view"))
    (switch-to-buffer buffer)))

(defun counsel-keepassxc--edit (&optional candidate)
  "Edit entry, CANDIDATE is the entry to edit."
  (let ((buffer (generate-new-buffer "*keepassxc-edit*"))
        (entry (counsel-keepassxc--entry-get candidate)))
    (with-current-buffer
        buffer (insert
                (format "Edit Keepassxc Entry.\n========================\nTitle: %s\nUserName: %s\nPassword: %s\nURL: %s\n"
                        (assoc-default "Title" entry nil "")
                        (assoc-default "UserName" entry nil "")
                        (assoc-default "Password" entry nil "")
                        (assoc-default "URL" entry nil "")))
        (forward-line -4)
        (goto-char (point-at-eol))
        (counsel-keepassxc-entry-mode)
        (set (make-local-variable 'keepassxc-candidate) candidate)
        (set (make-local-variable 'keepassxc-action) "edit"))
    (switch-to-buffer buffer)))

(defun counsel-keepassxc--add (candidate)
  "Add entry, CANDIDATE is useless."
  (let ((buffer (generate-new-buffer "*keepassxc-add*")))
    (with-current-buffer buffer (insert
                                 "Add Keepassxc Entry.\n========================\nTitle: \nUserName: \nPassword: Generate10\nURL: \n")
                         (forward-line -4)
                         (goto-char (point-at-eol))
                         (counsel-keepassxc-entry-mode)
                         (set (make-local-variable 'keepassxc-candidate) candidate)
                         (set (make-local-variable 'keepassxc-action) "add"))
    (switch-to-buffer buffer)))

(defun counsel-keepassxc--clone (candidate)
  "Clone entry, CANDIDATE is useless."
  (let ((buffer (generate-new-buffer "*keepassxc-clone*"))
        (entry (counsel-keepassxc--entry-get candidate)))
    (with-current-buffer buffer
      (insert (format
               "Clone Keepassxc Entry.\n========================\nTitle: %s\nUserName: %s\nPassword: %s\nURL: %s\n"
               (assoc-default "Title" entry nil "")
               (assoc-default "UserName" entry nil "")
               (assoc-default "Password" entry nil "")
               (assoc-default "URL" entry nil "")))
      (forward-line -4)
      (goto-char (point-at-eol))
      (counsel-keepassxc-entry-mode)
      (set (make-local-variable 'keepassxc-candidate) candidate)
      (set (make-local-variable 'keepassxc-action) "add"))
    (switch-to-buffer buffer)))

(defun counsel-keepassxc--delete (candidate)
  "Delete entry, CANDIDATE is the entry to delete."
  (with-temp-buffer
    (insert (cadr candidate))
    (let ((args (list
                 (point-min)
                 (point-max)
                 "keepassxc-cli"
                 t t nil
                 "rm"
                 (expand-file-name counsel-keepassxc-database-file)
                 (car candidate))))
      (if (not (eq 0 (apply 'call-process-region args)))
          (error
           "Error: execute keepassxc-cli delete failed")
        (message "keepassxc-cli delete entry \"%s\" succeed" (car candidate))))))

(ivy-set-actions 'counsel-keepassxc '(("u" counsel-keepassxc--copy-username "copy username")
                                      ("p" counsel-keepassxc--copy-password "copy password")
                                      ("l" counsel-keepassxc--copy-url "copy url")
                                      ("n" counsel-keepassxc--copy-notes "copy notes")
                                      ("a" counsel-keepassxc--add "add entry")
                                      ("c" counsel-keepassxc--clone "clone entry")
                                      ("e" counsel-keepassxc--edit "edit entry")
                                      ("d" counsel-keepassxc--delete "delete entry")))

;;;###autoload
(setq master-password nil)
(defun counsel-keepassxc ()
  "Complete keepassxc password with Ivy."
  (interactive)
  (when  (not master-password)
    (setq master-password (read-passwd (format "Master password for %s: "
                                               counsel-keepassxc-database-file))))

  ;; (let ((master-password (read-passwd (format "Master password for %s: "
  ;;                                             counsel-keepassxc-database-file))))
  (ivy-read "keepassxc: " (counsel-keepassxc--candidates master-password)
            :history 'counsel-keepassxc-history
            :action #'counsel-keepassxc--view
            :caller 'counsel-keepassxc
            :require-match t))

#+END_SRC
** Ivy Posframe
#+BEGIN_SRC emacs-lisp
(use-package ivy-posframe
  :ensure t
  :after ivy
  :diminish
  :config
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center))
        ivy-posframe-height-alist '((t . 10))
        ivy-posframe-parameters '((internal-border-width . 10)))
  (setq ivy-posframe-width 80)
  (ivy-posframe-mode +1))
#+END_SRC
** Org Export CSS Styles
#+BEGIN_SRC emacs-lisp
;;(load-file (concat (file-name-directory buffer-file-name) "sakura-theme/sakura.el"))
;; (load-file "~/.emacs.d/sakura-theme/sakura.el")
(load-file (locate-user-emacs-file "sakura-theme/sakura.el"))
#+END_SRC
