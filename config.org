* Prepare Config
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
(setq gc-cons-threshold 100000000)
#+end_src

* Package Manager Setup
#+begin_src emacs-lisp
(require 'package)
(setq package-enable-at-startup nil) ; tells emacs not to load any packages before starting up

;; the following lines tell emacs where on the internet to look up
;; for new packages.
;; when facing problems with package installation delete ~/.emacs.d/elpa/archives/melpa/archive-contents and `M-x package-refresh-contens` on next launch
(setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                         ("gnu"       . "https://elpa.gnu.org/packages/")
                         ("melpa"     . "https://melpa.org/packages/")
                         ;;("marmalade" . "http://marmalade-repo.org/packages/")
                         ))

;;  (package-initialize) ; guess what this one does ?



;; Bootstrap `use-package'
(unless (package-installed-p 'use-package) ; unless it is already installed
  (package-refresh-contents) ; updage packages archive
  (package-install 'use-package)) ; and install the most recent version of use-package

(require 'use-package) ; guess what this one does too ?

(setq use-package-expand-minimally t)


#+end_src

* General
#+begin_src emacs-lisp
(setq delete-old-versions -1 )		; delete excess backup versions silently
(setq version-control t )		; use version control
(setq vc-make-backup-files t )		; make backups file even when in version controlled dir
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
(fset 'yes-or-no-p 'y-or-n-p)
(setq vc-follow-symlinks t )				       ; don't ask for confirmation when opening symlinked file
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
(setq inhibit-startup-screen t )	; inhibit useless and old-school startup screen
(setq ring-bell-function 'ignore )	; silent bell when you make a mistake
(setq coding-system-for-read 'utf-8 )	; use utf-8 by default
(setq coding-system-for-write 'utf-8 )
(setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
(setq default-fill-column 80)		; toggle wrapping text at the 80th character
(setq-default tab-width 2)                    ; tab are 2 spaces large
(setq initial-scratch-message "Welcome to Emacs") ; print a default message in the empty scratch buffer opened at startup
(setq tab-stop-list (number-sequence 2 120 2)) ;; set tab length
(setq evil-want-C-u-scroll t) ;; scroll with C-u like in vim
;;(set-display-table-slot standard-display-table 'wrap ?\ )
(set-display-table-slot standard-display-table 0 ?\ ) 
(set-display-table-slot standard-display-table 'wrap ?\ )
(setq-default indent-tabs-mode nil)
(mapc
 (lambda (face) (set-face-attribute face nil :weight 'normal :underline nil)) (face-list))

(put 'narrow-to-defun  'disabled nil)
(put 'narrow-to-page   'disabled nil)
(put 'narrow-to-region 'disabled nil)

(global-set-key [mouse-3] 'mouse-popup-menubar-stuff)
(setq font-lock-maximum-decoration t)
#+end_src

* Appearance
** All the icons
#+begin_src emacs-lisp
(setq load-prefer-newer t)
(use-package all-the-icons :ensure t :defer t)
;; dont forget to M-x all-the-icons-install-fonts
#+end_src

** General
This is the font I searched that was used as default when no font was set (pretty nice)
=(add-to-list 'default-frame-alist '(font . "SourceCodePro 10"))=



Note try (setq left-margin-width 20) and (set-window-margins (selected-window) 20 20)
Note: (internal-border-width . 40) is linked with emacs.internalBorder: 40 Emacs.InternalBorder: 40 in .Xresources
#+begin_src emacs-lisp
;; (setq default-frame-alist '((font . "Bront 13")))
;; (setq default-frame-alist '((font . "SourceCodePro 11")))
(setq default-frame-alist '((font . "Hack 11")))
(setq whitespace-line-column 999)
(set-face-bold-p 'bold nil)
;; (setq-default left-margin-width 4 right-margin-width 2) ; Set down because to much margin with built-in linums
(setq-default left-margin-width 0 right-margin-width 0) ; Define new widths.
(set-window-buffer nil (current-buffer)) 



;; (set-face-attribute 'default nil :height 120)
;; (set-default-font "Noto Sans 12")
;; (set-default-font "Fira Mono 12")
;; (add-to-list 'default-frame-alist '(font . "Overpass Mono 11"))
;; DejaVuSansMono FTW!!!
;; (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono 11"))
;; (add-to-list 'default-frame-alist '(font . "Bront 13")) ;; love dis font omfg! gives me apple vibes on linux
;; (add-to-list 'default-frame-alist '(font . "Hack 12"))
;; (add-to-list 'default-frame-alist '(font . "Fira Mono 12"))
;; (add-to-list 'default-frame-alist '(font . "Input Mono Light"))
;; (set-default-font "Fira Code 12")
;; (set-default-font "Hack 12")
;; (set-default-font "Inconsolata 14")
;; (set-default-font "Droid Sans Mono for Powerline Plus Nerd File Types Mono 13")
;;  (set-fringe-mode 0) ;; deactivates gutters at screen edges on linebreak
;; (set-window-fringes (selected-window) 0 0 nil)
;; (setq whitespace-style '(faces spaces indentation))
#+end_src

** Modeline
*** Customization
#+BEGIN_SRC emacs-lisp
(defadvice vc-mode-line (after strip-backend () activate)
  (when (stringp vc-mode)
    (let ((noback (replace-regexp-in-string
                   (format "^ %s:" (vc-backend buffer-file-name))
                   " " vc-mode)))
      (setq vc-mode noback))))

(defun simple-mode-line-render (left right)
  "Return a string of `window-width' length containing LEFT, and RIGHT
 aligned respectively."
  (let* ((available-width (- (window-width) (length left) 2)))
    (format (format " %%s %%%ds " available-width) left right)))

(setq-default
 mode-line-format
 '((:eval
    (simple-mode-line-render
     ;; left
     (format-mode-line
      (quote
       (" %e"
        mode-line-modified
        mode-line-frame-identification
        mode-line-buffer-identification
        (vc-mode vc-mode)

        " [%l:%c] "
        ;; evil-mode-line-tag
        "%m"
        mode-line-misc-info
        )))
     ;; right
     (format-mode-line
      (eval (format-time-string "%H:%M %d.%m.%y")
            ;; mode-line-modes
            ))))))
#+END_SRC
*** Diminish
#+BEGIN_SRC emacs-lisp
(eval-when-compile (require 'cl))

(defvar diminish-must-not-copy-minor-mode-alist nil
  "Non-nil means loading diminish.el won't (copy-alist minor-mode-alist).
Normally `minor-mode-alist' is setq to that copy on loading diminish because
at least one of its cons cells, that for abbrev-mode, is read-only (see
ELisp Info on \"pure storage\").  If you setq this variable to t & then
try to diminish abbrev-mode under GNU Emacs 19.34, you'll get the error
message \"Attempt to modify read-only object\".")

(or diminish-must-not-copy-minor-mode-alist
    (callf copy-alist minor-mode-alist))

(defvar diminished-mode-alist nil
  "The original `minor-mode-alist' value of all (diminish)ed modes.")

(defvar diminish-history-symbols nil
  "Command history for symbols of diminished modes.")

(defvar diminish-history-names nil
  "Command history for names of diminished modes.")


(defun diminish (mode &optional to-what)
  "Diminish mode-line display of minor mode MODE to TO-WHAT (default \"\").
Interactively, enter (with completion) the name of any minor mode, followed
on the next line by what you want it diminished to (default empty string).
The response to neither prompt should be quoted.  However, in Lisp code,
both args must be quoted, the first as a symbol, the second as a string,
as in (diminish 'jiggle-mode \" Jgl\").
The mode-line displays of minor modes usually begin with a space, so
the modes' names appear as separate words on the mode line.  However, if
you're having problems with a cramped mode line, you may choose to use single
letters for some modes, without leading spaces.  Capitalizing them works
best; if you then diminish some mode to \"X\" but have abbrev-mode enabled as
well, you'll get a display like \"AbbrevX\".  This function prepends a space
to TO-WHAT if it's > 1 char long & doesn't already begin with a space."
  (interactive (list (read (completing-read
                            "Diminish what minor mode: "
                            (mapcar (lambda (x) (list (symbol-name (car x))))
                                    minor-mode-alist)
                            nil t nil 'diminish-history-symbols))
                     ))
  (let ((minor (assq mode minor-mode-alist)))
    (when minor
      (progn (callf or to-what "")
             (when (and (stringp to-what)
                        (> (length to-what) 1))
               (or (= (string-to-char to-what) ?\ )
                   (callf2 concat " " to-what)))
             (or (assq mode diminished-mode-alist)
                 (push (copy-sequence minor) diminished-mode-alist))
             (setcdr minor (list to-what))))))

#+END_SRC
** Theme
Best light theme by far (for real!):
#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :ensure t
  :config
  (load-theme 'base16-one-light)
  (set-face-attribute 'line-number-current-line nil
                      :background "#808e95"
                      :foreground "#f0f0f1"
                      :bold nil))
#+END_SRC
Nice dark theme(s):
#+BEGIN_SRC emacs-lisp
;; (progn
;;   (load-theme 'base16-materia)
;;   (set-face-attribute 'line-number-current-line nil
;;                       :background "#707880"
;;                       :foreground "f0f0f1"))
;; (use-package one-themes
;;   :ensure t
;;   :config
;;   (load-theme 'one-dark t)
;; )
;; (load-theme 'doom-dracula t)
#+END_SRC
Doom-Dracula is also nice

#+begin_src emacs-lisp
                                        ;(use-package doom-themes
                                        ;  :ensure t
                                        ;  :config
                                        ;  (load-theme 'doom-spacegrey t)
                                        ;  )


;; (use-package base16-theme :ensure t
;;   :config
;;   (setq base16-distinct-fringe-background nil)
;;   (load-theme 'base16-materia))

                                        ;  (use-package kaolin-themes :ensure t
                                        ;    :config
                                        ;    (load-theme 'kaolin-valley-dark t)
                                        ;    )

                                        ;  (use-package creamsody-theme :ensure t) ;; overwrites stuff so only execute once manually and then comment out again..
;; (cond ((string-equal answer "c") (load-theme 'base16-material))

                                        ; Deactivate Question on Boot (mainly so Emacs Daemon etc can be run)
;; (while (progn
;;          (setq answer (downcase (char-to-string (read-char "Do you want to code [c] or write [w] "))))
;;          (not (or (string-equal answer "c") (string-equal answer "w") (string-equal answer "x")))))
;; (cond ((string-equal answer "c")
;;        (progn
;;          (use-package creamsody-theme :ensure t)
;;          (load-theme 'creamsody)
;;               (creamsody-modeline-four)
;;               (set-face-attribute 'mode-line-inactive nil
;;                                   :foreground (face-attribute 'creamsody-modeline-two-inactive :foreground)
;;                                   :background (face-attribute 'creamsody-modeline-two-inactive :background)
;;                                   :height 120
;;                                   :inverse-video nil
;;                                   :box `(:line-width 6 :color ,(face-attribute 'creamsody-modeline-two-inactive :background) :style nil))
;;               ;;(setq default-frame-alist '((internal-border-width . 40) (font . "Bront 14")))

;;               (set-face-attribute 'mode-line-inactive nil
;;                                   :underline t
;;                                   :background (face-background 'default))))
;;       ((string-equal answer "w")
;;        (load-theme 'base16-solarized-light)
;;        (set-face-background 'mode-line "#cfdeee")))

;; (use-package base16-theme :ensure t)
;; (setq dark-theme nil)
;; (use-package gruvbox-theme :ensure t)

;; (if dark-theme
;; (load-theme 'base16-materia)
;; (load-theme 'gruvbox-dark-soft)
;; (load-theme 'gruvbox-light-medium))
;; (load-theme 'base16-material-lighter))


;;(load-theme 'base16-material-lighter)
;;(load-theme 'base16-one-light)
;; (load-theme 'base16-harmonic-light)

;; (use-package one-themes 
;;  :init (load-theme 'one-light t))
;; (load-theme 'base16-flat)
                                        ;  (load-theme 'base16-harmonic-light)

                                        ;   (load-theme 'base16-porple)
;; (load-theme 'base16-material)
;; (load-theme 'base16-material-palenight)
                                        ;  (load-theme 'base16-unikitty-light)

                                        ;(set-face-foreground 'mode-line-buffer-id "purple")
                                        ;(set-face-background 'mode-line "#44475a") ; for dark themes


;; p(set-face-background 'mode-line "#cfdeee")

;; (load-theme 'base16-solarized-light)
;; (set-face-background 'mode-line "#cfdeee") ; for light themes

#+end_src

* Functions
Function for vim-like increment/decrement
#+BEGIN_SRC emacs-lisp
(defun my-change-number-at-point (change)
  (let ((number (number-at-point))
        (point (point)))
    (when number
      (progn
        (forward-word)
        (search-backward (number-to-string number))
        (replace-match (number-to-string (funcall change number)))
        (goto-char point)))))
(defun my-increment-number-at-point ()
                                        ;"Increment number at point like vim's C-a"
  (interactive)
  (my-change-number-at-point '1+))
(defun my-decrement-number-at-point ()
  "Decrement number at point like vim's C-x"
  (interactive)
  (my-change-number-at-point '1-))
(global-set-key (kbd "C-c a") 'my-increment-number-at-point)
(global-set-key (kbd "C-c x") 'my-decrement-number-at-point)

#+END_SRC
Other functions
#+begin_src emacs-lisp
;; (defvar xrdb-master-file nil)
(defvar xrdb-master-file "~/.Xresources")
(defcustom xrdb-program "xrdb"
  "*Program to run to load or merge resources in the X resource database."
  )

(defcustom xrdb-program-args '("-merge")
  "*List of string arguments to pass to `xrdb-program'."
  )

(defun xrdb-database-merge ()
  (interactive)
  (let ((outbuf (get-buffer-create "*Shell Command Output*")))
    (with-current-buffer outbuf (erase-buffer))
    (apply 'call-process xrdb-program xrdb-master-file outbuf t
           xrdb-program-args))
  (if (not (zerop (with-current-buffer outbuf (buffer-size))))
      (pop-to-buffer outbuf))
  (message "Merging... done"))

(eval-after-load 'term
  '(progn
     (define-key term-mode-map (kbd "C-j") 'term-char-mode)
     (define-key term-mode-map (kbd "C-k") 'term-line-mode)
     (define-key term-raw-map (kbd "C-j") 'term-char-mode)
     (define-key term-raw-map (kbd "C-k") 'term-line-mode)
     ))


(defun popup-shell ()
  (interactive)
  (if (get-buffer-window "*terminal*")
      (progn (setq popup-shell-open nil)
             (delete-windows-on "*terminal*")
             )
    (split-window-below)
    (windmove-down)
    (eshell)
    ;; (term "/usr/bin/zsh")
    (shrink-window 16)
    ))

(defun my/disable-scroll-bars (frame)
  (modify-frame-parameters frame
                           '((vertical-scroll-bars . nil)
                             (horizontal-scroll-bars . nil))))
(add-hook 'after-make-frame-functions 'my/disable-scroll-bars)

(defun open-termite ()
  (interactive "@")
  (shell-command (concat "termite"
                         " > /dev/null 2>&1 & disown") nil nil))
(defun indent-buffer ()
  "Apply indentation rule to the entire buffer."
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max)))

(defun setup-tide-mode ()
  (interactive)
  (setq tide-node-executable "/home/chinchi/.nvm/versions/node/v9.0.0/bin/node")
  (setq tide-tsserver-executable (expand-file-name tide--tsserver tide-tsserver-directory))
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode -1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

(defun add-semicolon ()
  (interactive)
  (end-of-line)
  (when (not (looking-back ";"))
    (insert ";"))
  (evil-first-non-blank))

(defun insert-uuid ()
  (interactive)
  (let ((rnd (md5 (format "%s%s%s%s%s%s%s"
                          (random)
                          (current-time)
                          (user-uid)
                          (emacs-pid)
                          (user-full-name)
                          user-mail-address
                          (recent-keys)))))
    (insert (format "%s-%s-4%s-%s%s-%s"
                    (substring rnd 0 8)
                    (substring rnd 8 12)
                    (substring rnd 13 16)
                    (format "%x"
                            (logior
                             #b10000000
                             (logand
                              #b10111111
                              (string-to-number
                               (substring rnd 16 18) 16))))
                    (substring rnd 18 20)
                    (substring rnd 20 32)))
    ))
#+end_src
** Password Generator
#+BEGIN_SRC emacs-lisp
  (defun* make-password (length &optional (upper t) (lower t) (number t) (symbol nil) (ambiguous nil))
    "Return a string of LENGTH random characters.  If UPPER is non-nil,
  use uppercase letters.  If lower is non-nil, use lowercase letters.
  If NUMBER is non-nil, use numbers.  If SYMBOL is non-nil, use one of
  \"!\"#$%&'()*+'-./:;<=>?@`{}|~\".  If AMBIGUOUS is nil, avoid
  characters like \"l\" and \"1\", \"O\" and \"0\"."
    (interactive (make-password-prompt-for-args))
    (let ((char-list (make-password-char-list upper lower number symbol ambiguous))
     position password)
      (random t)
    (loop for i from 1 to length 
    do (setq position (random (length char-list))
       password (concat password (string (nth position char-list)))))
    (if (interactive-p)
        (let* ((strength (make-password-strength length upper lower number symbol ambiguous))
         (bits (car strength))
         (number (cadr strength)))
    (message "The password \"%s\" is one of 10^%d possible and has a bit equivalence of %d" 
             password (round number) (round bits))
    (insert password))
      password)))

  (defun make-password-char-list (upper lower number symbol ambiguous)
    (let* ((upper-chars-ambiguous '(?I ?O ?G))
     (upper-chars (loop for i from ?A to ?Z unless 
            (member i upper-chars-ambiguous)
            collect i))
     (lower-chars-ambiguous '(?l ?o))
     (lower-chars (loop for i from ?a to ?z unless 
            (member i lower-chars-ambiguous)
            collect i))
     (number-chars-ambiguous '(?0 ?1 ?6))
     (number-chars (loop for i from ?0 to ?9 unless
             (member i number-chars-ambiguous)
             collect i))
     (symbol-chars '(?! ?@ ?# ?$ ?% ?& ?* ?( ?) ?+ ?= ?/ 
            ?{ ?} ?[ ?] ?: ?\; ?< ?>))
     (symbol-chars-ambiguous '(?_ ?- ?| ?, ?. ?` ?' ?~ ?^ ?\"))
     char-list)
    (if upper
        (setq char-list (append char-list upper-chars)))
    (if lower
        (setq char-list (append char-list lower-chars)))
    (if number
        (setq char-list (append char-list number-chars)))
    (if symbol
        (setq char-list (append char-list symbol-chars)))
    (if ambiguous
        (setq char-list (append char-list
              upper-chars-ambiguous 
              lower-chars-ambiguous
              number-chars-ambiguous
              symbol-chars-ambiguous)))
    char-list))

  (defun make-password-prompt-for-args ()
    (interactive)
    (list
     (string-to-number (read-from-minibuffer "Number of Characters: "))
     (y-or-n-p "Use uppercase: ")
     (y-or-n-p "Use lowercase: ")
     (y-or-n-p "Use numbers: ")
     (y-or-n-p "Use symbols: ")
     (y-or-n-p "Use ambiguous characters: ")))

  (defun* make-password-strength (length &optional (upper t) (lower t) (number t) (symbol nil) (ambiguous nil))
    "Calculate the number of possible passwords that could be generated
  given the criteria of LENGTH and use of UPPER, LOWER, NUMBER, SYMBOL,
  and AMBIGUOUS characters"
    (interactive (make-password-prompt-for-args))
    (let* ((char-list (make-password-char-list upper lower number symbol ambiguous))
     (bits (/ (* length (log (length char-list))) (log 2)))
     (number (/ (* bits (log 2)) (log 10))))
      (if (interactive-p)
    (message "number of combinations is 10^%d with a bit equivalence of %d" (round number) (round bits))
        (list bits number))))
#+END_SRC

* General Packages
** Evil
#+begin_src emacs-lisp
(setq evil-symbol-word-search t)
(setq evil-want-Y-yank-to-eol t)
(use-package evil
  :ensure t
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
  (setcdr evil-insert-state-map nil)
  (define-key evil-insert-state-map [escape] 'evil-normal-state)
  (setq-default evil-shift-width 2)
  (setq evil-search-module 'evil-search)
  ;;    (evil-set-initial-state 'occur-mode 'normal)

  ;;    (setq evil-ex-nohighlight t)
  ;; More configuration goes here
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
  (define-key evil-visual-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-visual-state-map (kbd "k") 'evil-previous-visual-line)
  )
#+end_src

** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :defer t
    :config
    (setq recentf-max-saved-items 150)
    ;;  (setq counsel-find-file-at-point t)
    ;;  (setq counsel-locate-cmd 'counsel-locate-cmd-mdfind)
    (define-key evil-insert-state-map (kbd "M-x") 'counsel-M-x)
    (setq counsel-find-file-ignore-regexp "\\.DS_Store\\|.git\\|node_modules"))
  (setq ivy-initial-inputs-alist nil)

  (use-package smex :ensure t)
#+end_src

** General.el 
#+BEGIN_SRC emacs-lisp
(use-package general :ensure t)
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
(setq org-export-async-init-file "~/.emacs.d/async-org-export.el")
(setq org-export-async-debug t)
#+END_SRC
Part below can be used to get a more recent version of org mode
#+begin_src emacs-lisp
  ;(unless (file-expand-wildcards (concat package-user-dir "/org-[0-9]*"))
    ;(package-install (elt (cdr (assoc 'org package-archive-contents)) 0))
    ;(require 'org)
    ;(require 'ox-extra)
    ;(ox-extras-activate '(ignore-headlines)))
#+end_src
Get back easy templates
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src
Disable <> auto pairing in org mode
#+begin_src emacs-lisp
(add-hook
 'org-mode-hook
 (lambda ()
   (setq-local electric-pair-inhibit-predicate
               `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src

Add org-bullets for nice icons instead of stars
#+begin_src emacs-lisp
  ;  (use-package org-bullets
  ;    :ensure t
  ;    :defer t
  ;    :init 
  ;    (setq org-bullets-bullet-list
  ;          '("◉" "◎" "⚫" "○" "►" "◇")))

(setq org-edit-src-content-indentation 0)

    ;; org-hide-emphasis-markers t)
    ;; (add-hook 'post-command-hook 'kk/org-latex-fragment-toggle t)
    (setq org-format-latex-options
          (quote(:foreground default :background default :scale 1.7 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
                             ("begin" "$1" "$" "$$" "\\(" "\\["))))
                                            ;(require 'epa-file)
                                            ;(epa-file-enable)
    (require 'org-crypt) 
    (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance (quote ("crypt")))
    ;; GPG key to use for encryption
    ;; Either the Key ID or set to nil to use symmetric encryption.
    (setq org-crypt-key "B489EB34B4E6E154")
    (setq org-src-window-setup 'current-window)

    (general-define-key
     :states '(normal motion)
     :keymaps 'org-mode-map
     :prefix "SPC"
     "m" '(:ignore :which-key "Major Mode[Org]")
     "mp" '(org-latex-export-to-pdf :which-key "Export to Pdf")
     "mb" '(org-hugo-export-to-md :which-key "Export to Hugo Markdown")
     "ms" '(org-edit-special :which-key "Edit source code")
     )

    (general-define-key
     :states '(normal motion)
     :keymaps 'org-src-mode-map
     :prefix "SPC"
     "m" '(:ignore :which-key "Major Mode[Org Source]")
     "ms" '(org-edit-src-exit :which-key "Save source and exit")
     "mq" '(org-edit-src-abort :which-key "Abort source code")
     )
    (add-hook 'org-mode-hook 'visual-line-mode)
    (add-hook 'org-mode-hook 'company-mode)
    (add-hook 'org-mode-hook (lambda () (blink-cursor-mode -1)))
  ;  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   (add-hook 'org-mode-hook 'display-line-numbers-mode)

  (setq org-latex-caption-above '(image table))
                                            ; Force utf8 and then change todo symbols
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (when (display-graphic-p)
      (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

    (setq org-todo-keywords (quote((sequence "⚑ Todo" "⚐ In Progress | Waiting" "|" "✔ Done" "✘ Canceled"))))
    (setq org-todo-keyword-faces
          '(("⚑ Todo" . "deep sky blue") ("⚐ In Progress | Waiting" . "orange") ("✘ Canceled" . (:foreground "red"))))
    (setq org-adapt-indentation nil)
    (setq-default org-display-custom-times t)
    (setq org-time-stamp-custom-formats '("<%a %d.%m.%Y>" . "<%a %d.%m.%Y %H:%M>"))
    (setq org-agenda-window-setup 'only-window)
                                            ;  (setq org-agenda-files '("~/personal/logbook.org"))
                                            ;  (setq org-default-notes-file '("~/personal/logbook.org"))
                                            ;  (setq org-capture-templates '(("t" "Add note [inbox]" entry
                                            ;                                 (file+headline "~/personal/logbook.org" "Inbox")
                                            ;                                 "*  %i%?")))

    ;; (setq org-agenda-files '("~/Dev/notes/inbox.org"
    ;;                          "~/Dev/notes/gtd.org"
    ;;                          "~/Dev/notes/tickler.org"))

    ;; (setq org-capture-templates '(("t" "Todo [inbox]" entry
    ;;                                (file+headline "~/Dev/notes/inbox.org" "Tasks")
    ;;                                "* TODO %i%?")
    ;;                               ("T" "Tickler" entry
    ;;                                (file+headline "~/Dev/notes/tickler.org" "Tickler")
    ;;                                "* %i%? \n %U")))
    ;; (setq org-refile-targets '(("~/Dev/notes/gtd.org" :maxlevel . 3)
    ;;                            ("~/Dev/notes/someday.org" :level . 1)
    ;;                            ("~/Dev/notes/tickler.org" :maxlevel . 2)))
    ;; Latex preview for .tex only
    ;; (use-package latex-preview-pane
    ;;   :ensure t
    ;;   :config
    ;;   (add-hook 'org-mode-hook (lambda () (latex-preview-pane-mode 1))))
#+end_src

# Add org ref for citation management
#+begin_src emacs-lisp
  ;; (setq org-latex-pdf-process
  ;;       '("pdflatex -interaction nonstopmode -output-directory %o %f"
  ;;         "bibtex %b"
  ;;         "pdflatex -interaction nonstopmode -output-directory %o %f"
  ;;         "pdflatex -interaction nonstopmode -output-directory %o %f"))
  ;;(use-package org-ref :ensure t)

;  (setq org-latex-to-pdf-process
;  '("pdflatex %f" "biber %b" "pdflatex %f" "pdflatex %f"))
(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"
        "biber %b"
        "pdflatex -interaction nonstopmode -output-directory %o %f"
        "pdflatex -interaction nonstopmode -output-directory %o %f"))
;; Allows source code execution with C-C C-c
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (C . t)))
#+end_src
** Line Numbers
Todo: Compare with supposedly newly built-in line numbering
# display-line-numbers-mode set to t and display-line-numbers-type to 'relative.
# Native line numbers contain a space before and after the line numbers. I don't think this can be customized away. Evaluating (line-number-display-width 'pixelwise) will return the character pixel width of the line numbers (combined), plus one additional column/char-width on each side of the line numbers. – lawlist Jun 13 '18 at 0:35 
# 1
# You were both right! Part of the space was the fringe, and the other was the padding on each side of the line numbers (which can't be removed). I found a post on /r/emacs asking a similar question: reddit.com/r/emacs/comments/6noyxa/… – Federico Jun 13 '18 at 12:01
#+begin_src emacs-lisp
;  (use-package nlinum-relative :ensure t
;    :defer t
;    :config
;    (setq nlinum-relative-redisplay-delay 0)      ;; delay
;    (setq nlinum-relative-current-symbol ""))
;;   (global-linum-mode nil)
;;   (linum-relative-toggle)
(setq display-line-numbers-type 'relative)
(setq display-line-numbers-current-absolute nil)
                                        ;(global-display-line-numbers-mode) 
;; (use-package linum-relative
;;   :ensure t
;;   :config
;;   (linum-relative-mode)
;;   (setq linum-relative-backend 'display-line-numbers-mode))
#+end_src
** Dired
Todo: Write "sired" or "sidered" :D
#+BEGIN_SRC emacs-lisp
;; (use-package all-the-icons-dired
;;   :ensure t)

;; (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

;; (use-package treemacs-icons-dired
;;   :after dired
;;   :ensure t
;;   :config (treemacs-icons-dired-mode))

(setq auto-revert-verbose nil)
(setq dired-dwim-target t)
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
(add-hook 'dired-mode-hook 'auto-revert-mode)

(put 'dired-find-alternate-file 'disabled nil)

(general-define-key
     :states '(normal motion)
     :keymaps 'dired-mode-map
     "H" '(dired-up-directory :which-key "Go up directory")
     "G" '(end-of-buffer :which-key "Go to end of buffer")
     "M" '(dired-mark-files-regexp :which-key "Makr files with regex")
     "gg" '(beginning-of-buffer :which-key "Go to start of buffer")
     "L" '(dired-find-alternate-file :which-key "Enter and kill current dired buffer")
     "f" '(find-file :which-key "Find/create file")
     ;; "RET" '(dired-find-alternate-file :which-key "Enter and kill current dired buffer")
     )
#+END_SRC
*** Dired Subtree
#+BEGIN_SRC emacs-lisp
(use-package dired-subtree :ensure t
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
#+END_SRC
*** Dired Subtree Faces
#+BEGIN_SRC emacs-lisp
(defun shade-color (color percent)
  (let ((R (min 255 (/  (* (+ 100 percent) (string-to-number (substring background-color 1 3) 16)) 100)))
        (G (min 255 (/  (* (+ 100 percent) (string-to-number (substring background-color 3 5) 16)) 100)))
        (B (min 255 (/  (* (+ 100 percent) (string-to-number (substring background-color 5 7) 16)) 100))))
    (concat "#" (format "%X" R) (format "%X" G) (format "%X" B))))

(eval-after-load "dired-subtree" '(progn
                            (let ((background-color (face-attribute 'default :background)))
                              (set-face-background 'dired-subtree-depth-1-face 
                                                   (shade-color background-color -5))
                              (set-face-background 'dired-subtree-depth-2-face 
                                                   (shade-color background-color -10))
                              (set-face-background 'dired-subtree-depth-3-face 
                                                   (shade-color background-color -15))
                              (set-face-background 'dired-subtree-depth-4-face 
                                                   (shade-color background-color -20))
                              (set-face-background 'dired-subtree-depth-5-face 
                                                   (shade-color background-color -25))
                              (set-face-background 'dired-subtree-depth-6-face 
                                                   (shade-color background-color -30)))))



#+END_SRC
*** Dired Toggle
#+begin_src emacs-lisp
(use-package dired-toggle
  :ensure t
  :defer t
  :bind (:map dired-mode-map
         ("q" . #'dired-toggle-quit)
         ([remap dired-find-file] . #'dired-toggle-find-file)
         ([remap dired-up-directory] . #'dired-toggle-up-directory)
         ("C-c C-u" . #'dired-toggle-up-directory))
  :config
  ;; (setq dired-toggle-window-size 32)
  (setq dired-toggle-window-side 'left)

  ;; Optional, enable =visual-line-mode= for our narrow dired buffer:
  ;; (add-hook 'dired-toggle-mode-hook
  ;;           (lambda () (interactive)
  ;;             (visual-line-mode 1)
  ;;             (setq-local visual-line-fringe-indicators '(nil right-curly-arrow))
  ;;             (setq-local word-wrap nil)))
  )
#+end_src
** Emacs Speak Statistics (ESS)
#+begin_src emacs-lisp
;; (use-package julia-mode :ensure t :defer t) ;; dependency for ess-site
  ;; (use-package ess
  ;;   :ensure t
  ;;   :defer t
  ;;   :init 
  ;;   (require 'ess-site)
  ;;   :config 
  ;;   (general-define-key
  ;;    :states '(normal motion)
  ;;    :keymaps 'ess-mode-map
  ;;    :prefix "SPC"
  ;;    "m" '(:ignore :which-key "Major Mode[ESS]")
  ;;    "mb" '(ess-eval-buffer :which-key "Eval buffer")
  ;;    "ml" '(ess-eval-line-and-step :which-key "Eval line")
  ;;    "mr" '(ess-eval-region :which-key "Eval region")
  ;;    "mi" '(asb-ess-R-object-popup-str :which-key "String inspect")
  ;;    "mI" '(asb-ess-R-object-popup-interactive :which-key "Interactive inspect")
  ;;    )
  ;;   (defun asb-read-into-string (buffer)
  ;;     (with-current-buffer buffer
  ;;       (buffer-string)))

  ;;   (defun asb-ess-R-object-popup (r-func)
  ;;     "R-FUNC: The R function to use on the object.
  ;;   Run R-FUN for object at point, and display results in a popup."
  ;;     (let ((objname (current-word))
  ;;           (tmpbuf (get-buffer-create "**ess-R-object-popup**")))
  ;;       (if objname
  ;;           (progn
  ;;             (ess-command (concat "class(" objname ")\n") tmpbuf)
  ;;             (let ((bs (asb-read-into-string tmpbuf)))
  ;;               (if (not(string-match "\(object .* not found\)\|unexpected" bs))
  ;;                   (progn
  ;;                     (ess-command (concat r-func "(" objname ")\n") tmpbuf)
  ;;                     (let ((bs (asb-read-into-string tmpbuf)))
  ;;                       (popup-tip bs)))))))
  ;;       (kill-buffer tmpbuf)))

  ;;   (defun asb-ess-R-object-popup-str ()
  ;;     (interactive)
  ;;     (asb-ess-R-object-popup "str"))

  ;;   (defun asb-ess-R-object-popup-interactive (r-func)
  ;;     (interactive "sR function to execute: ")
  ;;     (asb-ess-R-object-popup r-func))

  ;;   (add-hook 'ess-mode-hook 'company-mode)
  ;;   (add-hook 'ess-mode-hook 'display-line-numbers-mode)
  ;;   (add-hook 'ess-mode-hook 'outline-minor-mode)
  ;;   )
  (use-package popup :ensure t)
#+end_src

** Polymode
#+begin_src emacs-lisp
  ;; (use-package polymode
  ;;   :ensure t
  ;;   :defer t
  ;;   :config
  ;;   (setq load-path
  ;;         (append '("~/.emacs.d/elpa/polymode-20170307"  "~/.emacs.d/elpa/polymode-20170307/")
  ;;                 load-path))
  ;;   (require 'poly-R)
  ;;   (require 'poly-markdown)
  ;;   (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
  ;;   (autoload 'r-mode "ess-site.el" "Major mode for editing R source." t)
  ;;   )

#+end_src

** Which key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode 1)
  (setq which-key-idle-delay 1))

#+end_src

** Magit
#+begin_src emacs-lisp
    (use-package evil-magit
     :ensure t
  ;   :defer t ;; will loose keybinding overwritings
     :config 
     ;; (add-hook 'magit-mode-hook 'visual-line-mode)
  (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
#+end_src

** Ediff
#+BEGIN_SRC emacs-lisp
  (require 'ediff nil t)

  (defconst evil-collection-ediff-maps '(ediff-mode-map))

  (defvar evil-collection-ediff-initial-state-backup (evil-initial-state 'ediff-mode))
  (defvar evil-collection-ediff-long-help-message-compare2-backup ediff-long-help-message-compare2)
  (defvar evil-collection-ediff-long-help-message-compare3-backup  ediff-long-help-message-compare3)
  (defvar evil-collection-ediff-long-help-message-narrow2-backup  ediff-long-help-message-narrow2)
  (defvar evil-collection-ediff-long-help-message-word-backup  ediff-long-help-message-word-mode)
  (defvar evil-collection-ediff-long-help-message-merge-backup  ediff-long-help-message-merge)
  (defvar evil-collection-ediff-long-help-message-head-backup  ediff-long-help-message-head)
  (defvar evil-collection-ediff-long-help-message-tail-backup  ediff-long-help-message-tail)

  (defvar evil-collection-ediff-help-changed nil)

  (defun evil-collection-ediff-adjust-help ()
    "Adjust long help messages to reflect evil-ediff bindings."
    (unless evil-collection-ediff-help-changed
      (dolist (msg '(ediff-long-help-message-compare2
                     ediff-long-help-message-compare3
                     ediff-long-help-message-narrow2
                     ediff-long-help-message-word-mode
                     ediff-long-help-message-merge
                     ediff-long-help-message-head
                     ediff-long-help-message-tail))
        (dolist (chng '( ;;("^" . "  ")
                        ("p,DEL -previous diff " . "k,N,p -previous diff ")
                        ("n,SPC -next diff     " . "  j,n -next diff     ")
                        ("    j -jump to diff  " . "    d -jump to diff  ")
                        ("    h -highlighting  " . "    H -highlighting  ")
                        ("  v/V -scroll up/dn  " . "C-u/d -scroll up/dn  ")
                        ("  </> -scroll lt/rt  " . "zh/zl -scroll lt/rt  ")
                        ("  z/q -suspend/quit"   . "C-z/q -suspend/quit")))
          (setf (symbol-value msg)
                (replace-regexp-in-string (car chng) (cdr chng) (symbol-value msg))))))
    (setq evil-collection-ediff-help-changed t))

  (defun evil-collection-ediff-scroll-left (&optional arg)
    "Scroll left."
    (interactive "P")
    (let ((last-command-event ?>))
      (ediff-scroll-horizontally arg)))

  (defun evil-collection-ediff-scroll-right (&optional arg)
    "Scroll right."
    (interactive "P")
    (let ((last-command-event ?<))
      (ediff-scroll-horizontally arg)))

  (defun evil-collection-ediff-scroll-up (&optional arg)
    "Scroll up by half of a page."
    (interactive "P")
    (let ((last-command-event ?V))
      (ediff-scroll-vertically arg)))

  (defun evil-collection-ediff-scroll-down (&optional arg)
    "Scroll down by half of a page."
    (interactive "P")
    (let ((last-command-event ?v))
      (ediff-scroll-vertically arg)))

  (defun evil-collection-ediff-scroll-down-1 ()
    "Scroll down by a line."
    (interactive)
    (let ((last-command-event ?v))
      (ediff-scroll-vertically 1)))

  (defun evil-collection-ediff-scroll-up-1 ()
    "Scroll down by a line."
    (interactive)
    (let ((last-command-event ?V))
      (ediff-scroll-vertically 1)))

  (defun evil-collection-ediff-first-difference ()
    "Jump to first difference."
    (interactive)
    (ediff-jump-to-difference 1))

  (defun evil-collection-ediff-last-difference ()
    "Jump to last difference."
    (interactive)
    (ediff-jump-to-difference ediff-number-of-differences))

  ;; (defun evil-collection-ediff-restore-diff ()
  ;;   "Restore the copy of current region."
  ;;   (interactive)
  ;;   (ediff-restore-diff nil ?a)
  ;;   (ediff-restore-diff nil ?b))

  (defvar evil-collection-ediff-bindings
    '(("d"    . ediff-jump-to-difference)
      ("H"    . ediff-toggle-hilit)
      ("\C-e" . evil-collection-ediff-scroll-down-1)
      ("\C-y" . evil-collection-ediff-scroll-up-1)
      ("j"    . ediff-next-difference)
      ("k"    . ediff-previous-difference)
      ("N"    . ediff-previous-difference)
      ("gg"   . evil-collection-ediff-first-difference)
      ("G"    . evil-collection-ediff-last-difference)
      ("\C-d" . evil-collection-ediff-scroll-down)
      ("\C-u" . evil-collection-ediff-scroll-up)
      ("\C-z" . ediff-suspend)
      ("z"    . nil)
      ("zl"   . evil-collection-ediff-scroll-right)
      ("zh"   . evil-collection-ediff-scroll-left)
      ;; Not working yet
      ;; ("u"    . evil-collection-ediff-restore-diff)
      )
    "A list of bindings changed/added in evil-ediff.")

  (defun evil-collection-ediff-startup-hook ()
    "Place evil-ediff bindings in `ediff-mode-map'."
    (evil-set-initial-state 'ediff-mode 'normal)
    (evil-make-overriding-map ediff-mode-map 'normal)
    (dolist (entry evil-collection-ediff-bindings)
      (define-key ediff-mode-map (car entry) (cdr entry)))
    (unless (or ediff-3way-comparison-job
                (eq ediff-split-window-function 'split-window-vertically))
      (define-key ediff-mode-map "l" 'ediff-copy-A-to-B)
      (define-key ediff-mode-map "h" 'ediff-copy-B-to-A))
    (evil-normalize-keymaps)
    nil)

  (defun evil-collection-ediff-setup ()
    "Initialize evil-ediff."
    (add-hook 'ediff-startup-hook 'evil-collection-ediff-startup-hook)
    (evil-collection-ediff-adjust-help))

  (evil-collection-ediff-setup)
#+END_SRC
** Avy
#+begin_src emacs-lisp
(use-package avy :ensure t
  :defer t
  :commands (avy-goto-word-1))
#+end_src
** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :defer t
    :ensure t
    :commands (ivy-switch-buffer
               ivy-switch-buffer-other-window)
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers nil)) ;; set to true to show recent files

  (use-package ivy-rich
    :ensure t
    :after ivy
    ;; :custom
    ;; (ivy-virtual-abbreviate 'full
    ;;                         ivy-rich-switch-buffer-align-virtual-buffer t
    ;;                         ivy-rich-path-style 'abbrev)
    :config
    (setq ivy-rich-path-style 'abbreviate)
    (setq ivy-rich--display-transformers-list
          '(ivy-switch-buffer
            (:columns
             ((ivy-rich-switch-buffer-icon :width 2)
              (ivy-rich-candidate (:width 30))
              (ivy-rich-switch-buffer-size (:width 7))
              (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
              (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
             :predicate
             (lambda (cand) (get-buffer cand)))

            counsel-M-x
            (:columns
             ((counsel-M-x-transformer (:width 40))  ; thr original transfomer
              (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the command


            counsel-describe-function
            (:columns
             ((counsel-describe-function-transformer (:width 40))  ; the original transformer
              (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the function


            counsel-describe-variable
            (:columns
             ((counsel-describe-variable-transformer (:width 40))  ; the original transformer
              (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))  ; return the docstring of the variable


            counsel-recentf
            (:columns
             ((ivy-rich-candidate (:width 0.8)) ; return the candidate itself
              (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))) ; return the last modified time of the file

            )
          )

    (ivy-rich-mode 1)
    )

  (defun ivy-rich-switch-buffer-icon (candidate)
    (with-current-buffer
        (get-buffer candidate)
      (let ((icon (all-the-icons-icon-for-mode major-mode)))
        (if (symbolp icon)
            (all-the-icons-icon-for-mode 'fundamental-mode)
          icon))))
#+end_src

** Projectile
Todo: Maybe look for an projectile replacement since I mostly use "pp" and "p/" and projectile is a huge package
#+begin_src emacs-lisp
(use-package projectile :ensure t
  :defer t
  :config
  (setq projectile-find-dir-includes-top-level t)
  (setq projectile-mode-line " foo")
  (setq projectile-completion-system 'ivy)
  (setq projectile-file-exists-local-cache-expire (* 5 60))
  (setq projectile-globally-ignored-directories (append projectile-globally-ignored-directories  "__pycache__" ".cquery_cached_index"))
  (projectile-global-mode t))
#+end_src

** Lispyville
#+BEGIN_SRC emacs-lisp
  (use-package lispyville :ensure t
  :config (add-hook 'emacs-lisp-mode-hook #'lispyville-mode)
  (add-hook 'lisp-mode-hook #'lispyville-mode)

  (global-set-key (kbd "C-<left>") 'lispyville-slurp)
  (global-set-key (kbd "C-<right>") 'lispyville-barf)
  ;(global-set-key (kbd "C-<up>") 'lispyville-slurp)
  (global-set-key (kbd "C-<down>") 'lispyville-wrap-round))

#+END_SRC
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard :ensure t
    :config
    (display-line-numbers-mode) ; doesnt work to toggle..
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-banner-logo-title "“A good programmer is someone who always looks both ways before crossing a one-way street.” (Yoda)")
    ;(setq dashboard-startup-banner (expand-file-name "emacs-logo.png"
                                                     ;user-emacs-directory))
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            ;;(registers . 5)
                            ;;(agenda . 5)
                            (projects . 5)))
    (set-face-attribute 'widget-button nil :underline nil)
    )
  ;; (add-hook 'dashboard-mode-hook
  ;; 	    (lambda ()
  ;; 	       (set-display-table-slot buffer-display-table 'wrap ?\ )))
#+end_src

** Page Break Lines
Display horizontal lines instead of ugly characters
#+begin_src emacs-lisp
(use-package page-break-lines :ensure t)
;;  (add-hook 'page-break-lines-mode-hook
;; 	    (lambda ()
;; (set-display-table-slot standard-display-table 0 ?\ )))
;; (add-hook 'page-break-lines-mode-hook
;; (lambda ()
;;  (set-display-table-slot buffer-display-table 0 ?\ )))
;;(set-display-table-slot buffer-display-table 'wrap ?\ )))
#+end_src

** Company
#+begin_src emacs-lisp
(use-package company :ensure t
      :defer t
      :config
      ;(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
      (setq company-backends company-backends)
      (setq company-idle-delay 0.2)
      (add-hook 'company-mode-hook 'company-quickhelp-mode)
      (setq company-dabbrev-downcase nil)
      ;(yas-reload-all)
)
(setq company-clang-executable "/usr/bin/clang")
                                        ;  :config
                                        ;  (global-company-mode t))
(with-eval-after-load 'company
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))

;(defvar company-mode/enable-yas t
;  "Enable yasnippet for all backends.")
;;(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
(use-package company-quickhelp :ensure t)

#+end_src

** Evil Commentary
#+begin_src emacs-lisp
(use-package evil-commentary :ensure t :defer t)
#+end_src
** Indent Guide
#+begin_src emacs-lisp
  (use-package indent-guide :ensure t
  :defer t
  :config (set-face-background 'indent-guide-face "SkyBlue4")
  ;(setq indent-guide-delay 0.1)
  (setq indent-guide-char " "))
  ; (use-package highlight-indentation :ensure t
  ; :config
  ;  (set-face-background 'highlight-indentation-face "#ffffff")
  ;  (set-face-background 'highlight-indentation-current-column-face "#ff0000")
  ;)
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters :ensure t :defer t)
#+end_src
** Ag
#+begin_src emacs-lisp
(use-package ag :ensure t :defer t)
#+end_src

** Tab/Buffer/Workspace
#+begin_src emacs-lisp
  (use-package eyebrowse :ensure t 
  :config (eyebrowse-mode t)
  ;(set-face-foreground 'eyebrowse-mode-line-active "medium turquoise")
  (set-face-foreground 'eyebrowse-mode-line-active "purple")
  (setq eyebrowse-mode-line-separator "|")
  (setq eyebrowse-new-workspace "*dashboard*"))
#+end_src

** Pdf Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
;;    :ensure t
    :defer 1
    :config
;;    (pdf-tools-install)
    (evil-set-initial-state 'pdf-view-mode 'normal)
    (evil-define-key 'normal pdf-view-mode-map
      ;; motion
      (kbd "<return>") 'image-next-line
      "j" 'pdf-view-next-line-or-next-page
      "k" 'pdf-view-previous-line-or-previous-page
      "J" 'pdf-view-next-page-command
      "K" 'pdf-view-previous-page-command
      "gj" 'pdf-view-next-page-command
      "gk" 'pdf-view-previous-page-command
      "gg" 'pdf-view-first-page
      "G" 'pdf-view-last-page
      "l"  'image-forward-hscroll
      "h"  'image-backward-hscroll
      ;; zoom
      "+" 'pdf-view-enlarge
      "-" 'pdf-view-shrink
      "0" 'pdf-view-scale-reset
      "=" 'pdf-view-enlarge

      "i" 'org-noter-insert-note
      "I" 'org-noter-insert-precise-note

      (kbd "<C-down-mouse-1>") 'pdf-view-mouse-extend-region
      (kbd "<M-down-mouse-1>") 'pdf-view-mouse-set-region-rectangle
      (kbd "<down-mouse-1>")  'pdf-view-mouse-set-region
      ;; search
      "/" 'pdf-occur

      "zd" 'pdf-view-dark-minor-mode
      "zm" 'pdf-view-midnight-minor-mode
      "zp" 'pdf-view-printer-minor-mode
      )

      (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
;      (add-hook 'pdf-view-mode-hook (lambda () (linum-relative-mode -1)))
;      (add-hook 'pdf-view-mode-hook (lambda () (linum-mode -1)))
      (add-hook 'pdf-view-mode-hook (lambda () (beacon-mode -1)))
      (evil-define-key 'normal pdf-occur-buffer-mode-map
        (kbd "<return>") 'pdf-occur-goto-occurrence)
    )
;  (evil-define-key 'normal pdf-occur-buffer-mode-map
;    (kbd "<return>") 'pdf-occur-goto-occurrence)
#+end_src

** Org Noter
#+begin_src emacs-lisp
  (use-package org-noter
  :defer t
    :ensure t)
#+end_src

** Smooth Scroll
#+begin_src emacs-lisp
  (use-package smooth-scroll
    :ensure t
    :config
    (smooth-scroll-mode 1)
    ;; (setq smooth-scroll/vscroll-step-size 5)
  ;; (setq scroll-step            5
    )
    (setq scroll-margin 5)
     (setq scroll-conservatively most-positive-fixnum)
#+end_src

** Eshell Autosuggest
#+begin_src emacs-lisp
(use-package esh-autosuggest
  :hook (eshell-mode . esh-autosuggest-mode)
  ;; If you have use-package-hook-name-suffix set to nil, uncomment and use the
  ;; line below instead:
  ;; :hook (eshell-mode-hook . esh-autosuggest-mode)
  :ensure t)
#+end_src

** Rainbow
#+begin_src emacs-lisp
(use-package rainbow-mode :ensure t)
#+end_src

** Vs Code Icon
#+BEGIN_SRC emacs-lisp
(use-package vscode-icon
  :ensure t
  :commands (vscode-icon-for-file))
#+END_SRC
** Writer Mode
#+BEGIN_SRC emacs-lisp
;(use-package poet-theme
  ;  :ensure t)
  ;(use-package olivetti
  ;  :ensure t)
  (use-package writeroom-mode
    :ensure t
    :config
   (setq writeroom-fullscreen-effect 'maximized))
  (defun writemode ()
    (interactive)
    (writeroom-mode)
    )
#+END_SRC
** Neotree
#+BEGIN_SRC emacs-lisp
  ;(use-package neotree :ensure t
    ;:config 
    ;(setq neo-window-position (quote right))
    ;(setq neo-smart-open t)
    ;(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
;
    ;(evil-set-initial-state 'neotree-mode 'normal) ;; Neotree start in normal by default.
;
    ;;; (add-hook 'neotree-mode-hook
    ;;;           (lambda ()
                ;(evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-quick-look)
                ;(evil-define-key 'normal neotree-mode-map (kbd "SPC") nil)
                ;(evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
                ;(evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
                ;(evil-define-key 'normal neotree-mode-map (kbd "+") 'neotree-create-node)
                ;(evil-define-key 'normal neotree-mode-map (kbd "F") 'neotree-create-node)
                ;(evil-define-key 'normal neotree-mode-map (kbd "Y") 'neotree-copy-filepath-to-yank-ring)
                ;(evil-define-key 'normal neotree-mode-map (kbd "ff") 'neotree-create-node)
                ;(evil-define-key 'normal neotree-mode-map (kbd "yy") 'neotree-copy-node)
                ;(evil-define-key 'normal neotree-mode-map (kbd "gr") 'neotree-refresh)
                ;(evil-define-key 'normal neotree-mode-map (kbd "dd") 'neotree-delete-node)
                ;(evil-define-key 'normal neotree-mode-map (kbd "cc") 'neotree-rename-node)
                ;(evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
                ;(evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
                ;(evil-define-key 'normal neotree-mode-map (kbd "j") 'neotree-next-line)
                ;(evil-define-key 'normal neotree-mode-map (kbd "k") 'neotree-previous-line)
                ;(evil-define-key 'normal neotree-mode-map (kbd "L") 'neotree-change-root)
                ;(evil-define-key 'normal neotree-mode-map (kbd "M") 'neotree-stretch-toggle)
                ;(evil-define-key 'normal neotree-mode-map (kbd "m") 'neotree-stretch-toggle)
                ;;(evil-define-key 'normal neotree-mode-map (kbd "R") 'neotree-rename-node)
                ;(evil-define-key 'normal neotree-mode-map (kbd "R") 'neotree-refresh)
                ;(evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-select-up-node))
;                (evil-define-key 'normal neotree-mode-map (kbd "D") 'neotree-delete-node)
;                (evil-define-key 'normal neotree-mode-map (kbd "X") 'neotree-delete-node))
  ;;)
    ;;)
#+END_SRC

** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
        
(use-package treemacs-evil
  :after treemacs evil
  :ensure t)
#+END_SRC
** Ispell
#+BEGIN_SRC emacs-lisp
  ;; (setenv
  ;;   "DICPATH"
  ;;   "/usr/share/hunspell/de_DE")
  ;; ;; Tell ispell-mode to use hunspell.
  (setq
    ispell-program-name
    "hunspell")

;  (add-to-list 'ispell-local-dictionary-alist '("deutsch-hunspell"
;                                                "[[:alpha:]]"
;                                                "[^[:alpha:]]"
;                                                "[']"
;                                                t
;                                                ("-d" "de_DE"); Dictionary file name
;                                                nil
;                                                iso-8859-1))

  ;; (add-to-list 'ispell-local-dictionary-alist '("english-hunspell"
  ;;                                               "[[:alpha:]]"
  ;;                                               "[^[:alpha:]]"
  ;;                                               "[']"
  ;;                                               t
  ;;                                               ("-d" "en_US")
  ;;                                               nil
                                                ;; iso-8859-1))

  (setq ispell-program-name "hunspell"          ; Use hunspell to correct mistakes
        ispell-dictionary   "english") ; Default dictionary to use -> ispell-hunspell-dictionary-alist
        ;; ispell-dictionary   "deutsch") ; Default dictionary to use -> ispell-hunspell-dictionary-alist
#+END_SRC

** Htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize :ensure t :defer t)
#+END_SRC

** Goggles
#+BEGIN_SRC emacs-lisp
  (use-package evil-goggles :ensure t)

#+END_SRC
** Language Server Protocol
Generic LSP emacs implementation
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :defer t
  )
#+END_SRC

Provide as company backend
#+BEGIN_SRC emacs-lisp
(use-package company-lsp
  :ensure t
  :after company lsp-mode
  :init
  (push 'company-lsp company-backends))
#+END_SRC
*** C
#+BEGIN_SRC emacs-lisp
(use-package cquery :ensure t
 :config
(setq cquery-executable "/usr/bin/cquery"))
#+END_SRC
Then run =lsp-cquery-enable= when in a c/c++ file (or add hook).

** Hackernews
#+BEGIN_SRC emacs-lisp
  (use-package hackernews :ensure t :defer t)
#+END_SRC

** Helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful :ensure t
:config 
(global-set-key (kbd "C-h f") #'helpful-callable)

(global-set-key (kbd "C-h v") #'helpful-variable)
(global-set-key (kbd "C-h k") #'helpful-key)
)
(use-package elisp-demos :ensure t
:config
(advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)
)
#+END_SRC

** Evil Surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC

** Restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient :ensure t)
#+END_SRC
** Hugo
#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :ensure t            ;Auto-install the package from Melpa (optional)
  :after ox)
#+END_SRC

** Fzf
#+begin_src emacs-lisp
(use-package "fzf" :ensure t :init (setenv "FZF_DEFAULT_COMMAND" "fd --type f") '(add-to-list 'load-path "~/.fzf"))
#+end_src

* Keybindings 
#+begin_src emacs-lisp
;;(global-set-key (kbd "<escape>")      'keyboard-escape-quit) ;; send quit signal with escape
;;(global-set-key (kbd "<escape>")      'keyboard-quit) ;; send quit signal with escape
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))

;;(global-unset-key (kbd "SPC")) ;; hinders insertion of space in ins mode
(global-unset-key [f2])
#+end_src

** General.el
#+begin_src emacs-lisp
(general-define-key
 ;; replace default keybindings
 :states '(normal emacs)
                                        ;"C-s" 'swiper             ; search for string in current buffer
 "C-s" 'evil-search-forward             ; search for string in current buffer
 ;;   "C-p" 'company-select-previous             ; search for string in current buffer
 ;;   "C-n" 'company-select-next             ; search for string in current buffer
                                        ;"/" 'swiper             ; search for string in current buffer
 "/" 'evil-search-forward             ; search for string in current buffer
                                        ;"/" 'evil-search-forward             ; search for string in current buffer
 "M-x" 'counsel-M-x        ; replace default M-x with ivy backend
 "N" 'evil-search-previous
 "n" 'evil-search-next
 "\\" 'evil-ex-nohighlight
 "<f2>" 'iedit-mode
 ;; "C-w" 'evil-delete-buffer
 )

(general-def :states '(normal motion emacs) "SPC" nil)
(general-def :keymaps '(compilation-mode-map ess-help-mode-map info-mode-map magit-diff-mode-map magit-status-mode-map dired-mode-map) "SPC" nil)
(general-def :keymaps '(compilation-mode-map magit-diff-mode-map magit-status-mode-map) "$" nil)

(general-define-key
 :states '(normal motion emacs)
 :prefix "SPC"

 ;; simple command
 "x" 'counsel-M-x        ; replace default M-x with ivy backend
 "TAB" '(mode-line-other-buffer :which-key "prev buffer")
 "SPC" '(avy-goto-word-or-subword-1  :which-key "go to char")
 "C-'" 'avy-goto-word-1
 "qq"  '(save-buffers-kill-terminal :which-key "Save all & quit")
 "RET" '(add-semicolon :which-key "Insert ; at eol")
 ;;"/" '(counsel-ag :which-key "Counsel ag search [everywhere]")
                                        ;"/" '(evil-search-forward :which-key "Swiper search")
 "/" '(swiper :which-key "Swiper search")
 ;; "'" '(ansi-term "/usr/bin/zsh" :which-key "popup shell")
 "'" '(popup-shell :which-key "popup shell")

 ;; Applications
 "a" '(:ignore t :which-key "Applications")
 "aa" '(ag :which-key "Ag")
 "ae" '(eshell :which-key "eshell")
 "ah" '(hackernews :which-key "Hackernews")
 "ar" '(ranger :which-key "Ranger")
 "at" '(open-termite :which-key "Termite")
 "ag" '(google-translate-at-point :which-key "Google Translate")
 "ac" '(compile :which-key "compile")
 "ar" '(recompile :which-key "recompile")
 "as" '(ispell-word :which-key "spell check")
 "ao" '(occur :which-key "occur") ;; example usage function\|var
 "ad" 'dired

 ;; Buffer
 "b" '(:ignore t :which-key "Buffer")
 ;; "bb" '(ivy-switch-buffer :which-key "Change buffer")
 "bb" '(counsel-ibuffer :which-key "Change buffer")
 "bd" '(kill-buffer :which-key "kill buffer")
 "bD" '(kill-some-buffers :which-key "kill some buffers")
 "bp" '(switch-to-prev-buffer :which-key "prev buffer")
 "bn" '(switch-to-prev-buffer :which-key "next buffer")

 "c" '(kill-this-buffer :which-key "kill current buffer")


 "dd"  '(kill-buffer-and-window :which-key "Kill buffer and window")

 ;; ;; Flymake
 ;; "m" '(:ignore t :which-key "Major Mode")

 ;; Flymake
 "e" '(:ignore t :which-key "Flymake")
 "eh" '(flymake-popup-current-error-menu :which-key "show error msg")
 "en" '(flymake-goto-next-error :which-key "next error")
 "ep" '(flymake-goto-prev-error :which-key "prev error")

 ;; Files
 "f" '(:ignore t :which-key "Files")
 "ff" '(counsel-find-file :which-key "find file")
 "fr"	'(counsel-recentf   :which-key "recent files")
 "fs" '(save-buffer :which-key "save file")
 "f/" '(swiper :which-key "search in file")
 ;; "ft" '(treemacs :which-key "toggle treemacs")
 ;;"ft" '(neotree-toggle :which-key "toggle sidebar")
 ;; "ft" '(sired :which-key "toggle sidebar")
 "ft" '(dired-toggle :which-key "toggle sidebar")

 ;; Git
 "g" '(:ignore t :which-key "Git")
 "gs" '(magit-status :which-key "status")
 "gu" '(smerge-keep-upper :which-key "keep upper")
 "gl" '(smerge-keep-lower :which-key "keep lower")
 "gb" '(smerge-keep-all :which-key "keep both")
 "gn" '(smerge-next :which-key "next conflict")

 ;; Help
 "h" '(:ignore t :which-key "Help")
 "hh" '(help-for-help-internal :which-key "open help")

 ;; Projects
 "p" '(:ignore t :which-key "Projects")
 "pf" '(counsel-git :which-key "Find file in git project")
 ;; "pf" '(counsel-fzf :which-key "Find file in git project")
 "p/" '(projectile-ag :which-key "Projectile ag search [in project]")
 ;; "pp" '(projectile-find-dir :which-key "Switch directory (project)")
 "pp" '(counsel-fzf :which-key "Switch directory (project)")
 "pb" '(projectile-switch-to-buffer :which-key "Switch project buffer")
 "ps" '(projectile-switch-project :which-key "Switch project")

 ;; Windows
 "w" '(:ignore t :which-key "Windows")
 "1" '(eyebrowse-switch-to-window-config-1 :which-key "workspace 1")
 "2" '(eyebrowse-switch-to-window-config-2 :which-key "workspace 2")
 "3" '(eyebrowse-switch-to-window-config-3 :which-key "workspace 3")
 "4" '(eyebrowse-switch-to-window-config-4 :which-key "workspace 4")
 "5" '(eyebrowse-switch-to-window-config-5 :which-key "workspace 5")
 "ws" '(split-window-below :which-key "Horizontal split")
 "wv" '(split-window-right :which-key "Vertical split")
 "wd" '(evil-window-delete :which-key "close window")
 "wD" '(eyebrowse-close-window-config :which-key "close workspace")
 "ww" '(ace-window :which-far-key "ace-window")
 "wm" '(delete-other-windows :which-far-key "next window")
 "wu" '(winner-undo :which-key "winner undo")
 "wr" '(winner-redo :which-key "winner redo")
 "wh" '(evil-window-left :which-key "left")
 "wH" '(evil-window-move-far-left :which-key "move left")
 "wj" '(evil-window-down :which-key "down")
 "wJ" '(evil-window-move-very-bottom :which-key "move down")
 "wk" '(evil-window-up :which-key "up")
 "wK" '(evil-window-move-very-top :which-key "move up")
 "wl" '(evil-window-right :which-key "right")
 "wL" '(evil-window-move-far-right :which-key "move right")
 "w+" '(evil-window-increase-height 30 :which-key "increase height")
 "w-" '(evil-window-decrease-height 30 :which-key "decrease height")
 "wc" '(eyebrowse-create-window-config :which-key "create workspace")
 "wn" '(eyebrowse-next-window-config :which-key "next workspace")
 "wp" '(eyebrowse-prev-window-config :which-key "prev workspace")
 ;; (enlarge-window 15)

 ;; Org Mode
 "o" '(:ignore t :which-key "Org")
 "oa" '(org-agenda :which-key "agenda")
 "oc" '((lambda () (interactive) (find-file "~/.emacs.d/config.org")) :which-key "config")
                                        ;     "ol" '((lambda () (interactive) (find-file "~/personal/logbook.org")) :which-key "logbook")
 "oq" '(org-capture :which-key "quick capture")
 )

#+end_src

Keybindings for outline mode:
#+BEGIN_SRC emacs-lisp
(general-define-key
   :states 'normal
   :keymaps 'outline-minor-mode-map
   "TAB" 'outline-toggle-children
   "<backtab>" 'outline-hide-body
   )
#+END_SRC

* ProgMode
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'company-mode)
(add-hook 'prog-mode-hook 'electric-pair-mode)
(add-hook 'prog-mode-hook 'evil-commentary-mode)
(add-hook 'prog-mode-hook 'column-number-mode)
;;(add-hook 'prog-mode-hook 'yas-global-mode)
                                        ;(add-hook 'prog-mode-hook 'yas-minor-mode)
(add-hook 'prog-mode-hook 'indent-guide-mode)
;;(add-hook 'prog-mode-hook 'highlight-indentation-mode)
(add-hook 'prog-mode-hook 'winner-mode)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
;;(add-hook 'prog-mode-hook 'whitespace-mode)
(add-hook 'prog-mode-hook 'show-paren-mode)
(add-hook 'prog-mode-hook 'hl-line-mode)
(add-hook 'prog-mode-hook 'evil-goggles-mode)
#+end_src

* WebMode
#+begin_src emacs-lisp
(use-package web-mode :ensure t
  :defer t
  :config
  (setq web-mode-markup-indent-offset 2) ; web-mode, html tag in html file
  (setq web-mode-css-indent-offset 2)    ; web-mode, css in html file
  (setq web-mode-code-indent-offset 2) ; web-mode, js code in html file
  ())
(add-to-list 'auto-mode-alist '("\\.vue" . web-mode))
#+end_src

* Languages
** JavaScript

#+begin_src emacs-lisp
(use-package company-tern :ensure t
  :defer t
  :after company
  :config
(setenv "PATH" (concat (getenv "PATH") ":~/.node_modules/bin"))
    (setq exec-path (append exec-path '("~/.node_modules/bin")))
  (add-to-list 'company-backends 'company-tern)
(define-key tern-mode-keymap (kbd "M-.") nil)
(define-key tern-mode-keymap (kbd "M-,") nil)
)

(add-hook 'js2-mode-hook (lambda ()
                           (tern-mode)
                           (company-mode)))


(use-package js2-mode :ensure t
  :defer t
  :config
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  )

(setq javascript-indent-level 2) ; javascript-mode
(setq js-indent-level 2) ; js-mode
(setq js2-basic-offset 2) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
;;(setq tide-basic-offset 2) ;

#+end_src
** Typescript

#+begin_src emacs-lisp
(use-package typescript-mode :ensure t
  :defer t
  )

(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
(use-package tide :ensure t
;;  :defer t
  :config
  ;;(add-to-list 'auto-mode-alist '("\\.ts\\'" . tide-mode))
  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)
  ;; formats the buffer before saving
  ;;(add-hook 'before-save-hook 'tide-format-before-save)
  )
(add-hook 'typescript-mode-hook #'setup-tide-mode)
(setq typescript-indent-level 2
      typescript-expr-indent-offset 2)
(setq evil-shift-width 2)
(setq typescript-indent-level 2) ; 
;;(setq tide-tsserver-executable "~/.nvm/versions/node/v9.0.0/lib/node_modules/typescript/bin/tsserver")
;;  (setq tide-tsserver-executable (expand-file-name tide--tsserver tide-tsserver-directory))



;; typescript mode specific keybindings
(general-define-key
 :states 'normal
 :keymaps 'typescript-mode-map
 "gd" 'tide-jump-to-definition
 "gr" 'tide-references
 )

(general-define-key
 :states 'normal
 :keymaps 'tide-references-mode-map
 "RET" 'tide-goto-reference
 )

#+end_src

** Css
#+begin_src emacs-lisp
(setq css-indent-offset 2) ; css-mode
#+end_src

** Go
The code below worked to load everything from .zshrc
#+BEGIN_SRC emacs-lisp
;;(defun load-env-vars () 
  ;;(let ((path (shell-command-to-string ". ~/.zshrc; echo -n $PATH")))
    ;;(setenv "PATH" path)
    ;;(setq exec-path (append (split-string-and-unquote path ":") exec-path)))
;;
  ;;(let ((gopath (shell-command-to-string ". ~/.zshrc; echo -n $GOPATH")))
    ;;(setenv "GOPATH" gopath)
    ;;(setq exec-path (append (split-string-and-unquote gopath ":") exec-path)))
#+END_SRC
However trying out this, will find out if it works the next time I work with Golang
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config (exec-path-from-shell-initialize))
#+END_SRC
Rest of go settings
#+begin_src emacs-lisp
;; go get: goflymake golang.org/x/tools/cmd/... godef gocode
(use-package go-mode :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  ;; :load-path "/tmp/elisp/go-mode"
  )

(use-package go-guru :ensure t)

(use-package flymake-go :ensure t
  ;; :config
  ;; (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  ;; :load-path "/tmp/elisp/go-mode"
  )

(use-package company-go :ensure t
  :after company
  :config
  (add-to-list 'company-backends 'company-go))

(defun my-go-mode-hook ()
  ;; (require 'go-guru)
  ;; (use-package go-guru
  ;; user-emacs-directory
  ;;  :load-path concat(user-emacs-directory "")"")

  (general-define-key
   :states 'normal
   :keymaps 'go-mode-map
   "gd" 'godef-jump
   "gh" 'godef-describe
   )

  (general-define-key
   :states '(normal motion)
   :keymaps 'go-mode-map
   :prefix "SPC"
   "m" '(go-guru-map :which-key "Major Mode[Go]")
   )
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save) ; gofmt before every save
  )

(add-hook 'go-mode-hook (lambda ()
                          (set (make-local-variable 'company-backends) '(company-go))
                          (company-mode)))

(add-hook 'go-mode-hook #'go-guru-hl-identifier-mode)
;(add-hook 'go-mode-hook #'load-env-vars)
(add-hook 'go-mode-hook 'my-go-mode-hook)
(add-hook 'go-mode-hook (lambda () (whitespace-mode -1)))
#+end_src

** C/C++
Run =lsp-cquery-enable= when in a c/c++ file (or add hook).

Look at this for debugging https://www.gnu.org/software/emacs/manual/html_node/emacs/GDB-Graphical-Interface.html
#+BEGIN_SRC emacs-lisp
    (add-hook 'c-mode-hook
      (lambda ()
        (set (make-local-variable 'compile-command)
             (format "gcc -std=c99 -Wall -g %s -o %s" (buffer-name) (file-name-sans-extension (buffer-name))))))

    (add-hook 'c++-mode-hook
      (lambda ()
        (set (make-local-variable 'compile-command)
             (format "g++ -g %s -o %s" (buffer-name) (file-name-sans-extension (buffer-name))))))

    ;; might want to activate gdb-many-windows by default
    (setq gdb-many-windows t)

  (general-define-key
     :states '(normal motion)
     :keymaps 'c-mode-base-map
     :prefix "SPC"
     "m" '(:ignore t :which-key "Major Mode[C/C++]")
     "md" '(gdb :which-key "Debug")
     )

  ;; (defun compileAndDebug ()
  ;;   (interactive)
  ;;   (progn
  ;;     (compile compile-command)
      ;; (gdb (concat default-directory " -i=mi " (file-name-sans-extension (buffer-name))))
      ;; (gdb (concat (file-name-sans-extension (buffer-name)) " -i=mi"))
    ;;   )
    ;; )
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
(use-package elpy :defer t :config (elpy-enable))
#+END_SRC

** C#
If it doesnt work start C# project with vs code, it will get the dependecies.
Most likely: OmniSharp for Linux, .Net Core Debugger, -> msbuild-stable (<--!!!)
#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode :ensure t)
;  (use-package omnisharp
;    :commands csharp-mode
;    :config
;    (add-hook 'csharp-mode-hook 'omnisharp-mode)
;    (add-to-list 'company-backends 'company-omnisharp))

  (use-package omnisharp
    :ensure t
    :after company
    :config
    (setq omnisharp-company-ignore-case nil)
    (setq omnisharp-company-sort-results nil)
;;(define-key omnisharp-mode-map (kbd ".") 'omnisharp-add-dot-and-auto-complete)
(define-key omnisharp-mode-map (kbd "<C-SPC>") 'omnisharp-auto-complete)
    (add-hook 'csharp-mode-hook
              (lambda ()
                (evil-define-key 'normal omnisharp-mode-map (kbd "g d") 'omnisharp-go-to-definition)
                ))
    (add-hook 'csharp-mode-hook 'omnisharp-mode)
    (add-hook 'csharp-mode-hook 'flycheck-mode)

    (add-hook 'csharp-mode-hook (lambda () (whitespace-mode -1)))
    (add-to-list 'company-backends 'company-omnisharp))
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :defer t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
    ;; :config     (add-hook markdown-mode-hook 'outline-minor-mode))
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t
    :config
    (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
    (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
    (add-to-list 'interpreter-mode-alist '("lua" . lua-mode)))

#+END_SRC

* Misc
#+BEGIN_SRC emacs-lisp
(diminish 'company-mode)
(diminish 'abbrev-mode)
(diminish 'yas-minor-mode)
(diminish 'line-number-mode)
(diminish 'nlinum-relative-mode)
(diminish 'undo-tree-mode)
(diminish 'eldoc-mode)
(diminish 'tide-mode)
(diminish 'flycheck-mode)
(diminish 'evil-commentary-mode)
(diminish 'page-break-lines-mode)
(diminish 'ivy-mode)
(diminish 'which-key-mode)
(diminish 'visual-line-mode)
(diminish 'indent-guide-mode)
(diminish 'auto-revert-mode)
(diminish 'projectile-mode)
(define-key global-map [(S-return)] 'add-semicolon)
#+END_SRC

* Temporary
#+begin_src emacs-lisp
(evil-add-command-properties #'tide-jump-to-definition :jump t)
(evil-add-command-properties #'omnisharp-go-to-definition :jump t)
;;(evil-add-command-properties #'evil-previous-line :jump t)
;;(evil-add-command-properties #'evil-next-line :jump t)

                                        ;(set-face-bold-p 'bold nil) ; disable bold font (didnt work)
(mapc ; disable bold font
 (lambda (face)
   (set-face-attribute face nil :weight 'normal :underline nil))
 (face-list))
 
(use-package google-translate :ensure t :defer t
  :config
  )
;; Doesnt work inside :config
(setq google-translate-default-target-language "en")
(setq google-translate-default-source-language "de")
; Replace the function below in source code for now..
;; (defun google-translate--search-tkk () (list 430675 2721866130))
;; (with-eval-after-load "google-translate"
;; (advice-add 'google-translate--search-tkk :override
;;               (lambda () (list 430675 2721866130)))
;;   )
#+end_src

Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  ;; :init
  :config
  (yas-global-mode 1)
  )
(use-package yasnippet-snippets :ensure t)

#+end_src

* Experimental
** Testing
todo : work this in
(add-hook 'comint-exec-hook 
(lambda () (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)))
#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
;;  (defface special-comment '((t (:background "#fafafa" :foreground "#fafafa"))) "Green")
(defface extra-comment '((t (:background "#fbf8ef" :foreground "#fafafa"))) "Green")

;;(defface extra-comment '((t (:foreground "#ffffff"))) "Cyan")

(font-lock-add-keywords
 'prog-mode '(("\\(\\b\\|[[:graph:]]\\)\\( \\)" (1 'extr-comment -1) (2 'extra-comment t))))
                                        ;'typescript-mode '(("\\(\\b\\|[[:graph:]]\\)\\( \\)" (1 'extr-comment -1) (2 'extra-comment t))))

(setq whitespace-space-regexp "\\(^ +\\| +$\\)") ; defines what should be matched as space, whitespaces that are not matched get default styling..

(setq whitespace-display-mappings
      '((space-mark   32     [183]     [46]) ; space
        (space-mark   160    [164]     [95]) ; hard space
        (newline-mark ?\n    [?\n]) ; remove $ to not display it
        (tab-mark     ?\t    [?\u00BB ?\t] [?\\ ?\t])))


(defvar my-prev-whitespace-mode nil)
(make-variable-buffer-local 'my-prev-whitespace-mode)
(defun pre-popup-draw ()
  "Turn off whitespace mode before showing company complete tooltip"
  (if whitespace-mode
      (progn
        (setq my-prev-whitespace-mode t)
        (whitespace-mode -1)
        (setq my-prev-whitespace-mode t))))
(defun post-popup-draw ()
  "Restore previous whitespace mode after showing company tooltip"
  (if my-prev-whitespace-mode
      (progn
        (whitespace-mode 1)
        (setq my-prev-whitespace-mode nil))))
(advice-add 'company-pseudo-tooltip-unhide :before #'pre-popup-draw)
(advice-add 'company-pseudo-tooltip-hide :after #'post-popup-draw)


                                        ;   (add-to-list 'custom-theme-load-path (file-name-as-directory "~/Dev/one-light-theme/"))

                                        ;   (load-theme 'one-light t t)

                                        ;   (enable-theme 'one-light)

;; Regex to set color for single whitespaces
                                        ;(mapc (lambda (mode)
                                        ;(font-lock-add-keywords
                                        ;mode '(("\\(\\b\\|[[:graph:]]\\)\\( \\)" (1 'extr-comment -1) (2 'extra-comment t)))))
                                        ;'(text-mode latex-mode mhtml-mode html-mode emacs-lisp-mode typescript-mode js2-mode  js-mode css-mode scss-mode go-mode
                                        ;texinfo-mode))
                                        ;(set-cursor-color "#7B1FA2")

;;   look into term (eshell replace)

                                        ;(use-package telephone-line
                                        ;:ensure t
                                        ;:config
;; (setq telephone-line-primary-left-separator 'telephone-line-abs-left
;; telephone-line-primary-right-separator 'telephone-line-abs-right)
                                        ;
                                        ;(telephone-line-defsegment my-vc-info ()
                                        ;(when vc-mode
                                        ;(cond
                                        ;((string-match "Git[:-]" vc-mode)
                                        ;(let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
                                        ;(concat "" (format " %s" branch))))
                                        ;((string-match "SVN-" vc-mode)
                                        ;(let ((revision (cadr (split-string vc-mode "-"))))
                                        ;(concat "" (format "SVN-%s" revision))))
                                        ;(t (format "%s" vc-mode)))))
                                        ;
                                        ;(telephone-line-defsegment* my-airline-position-segment (&optional lines columns)
                                        ;(let* ((l (number-to-string (if lines lines 1)))
                                        ;(c (number-to-string (if columns columns 2))))
                                        ;(if (eq major-mode 'paradox-menu-mode)
                                        ;(telephone-line-raw mode-line-front-space t)
                                        ;(concat " " "%" l "l:%" c "c"))))
                                        ;
                                        ;(setq telephone-line-lhs
                                        ;'((evil   . (telephone-line-evil-tag-segment))
                                        ;(accent . (my-vc-info
                                        ;telephone-line-process-segment))
                                        ;(nil    . (telephone-line-buffer-segment
                                        ;telephone-line-projectile-segment))))
                                        ;(setq telephone-line-rhs
                                        ;'((nil    . (telephone-line-flycheck-segment
                                        ;telephone-line-misc-info-segment))
                                        ;(accent . (telephone-line-major-mode-segment))
                                        ;(nil    . (telephone-line-hud-segment
                                        ;my-airline-position-segment))))
                                        ;
                                        ;(setq display-time-format "%b %d %a %R")
                                        ;(setq display-time-default-load-average nil)
                                        ;(setq display-time-use-mail-icon t)
                                        ;(setq display-time-mail-file t)
                                        ;(display-time-mode t)
                                        ;
                                        ;(telephone-line-mode 1))
#+END_SRC
** Sidered/Dired-Toggle
Dired as file tree experiment 
=(display-buffer-in-side-window (get-buffer "dired") '((side . left)))=
#+BEGIN_SRC emacs-lisp


;; Replace in dired-toggle.el
;; (defun dired-toggle-find-file ()
;;   "Wraper for `dired-find-file', use `find-alternate-file' instead so will not
;; create new buffer when changing directory, and will keep `dired-toggle-mode' and
;; `dired-hide-details-mode' states after opening new direcoty."
;;   (interactive)
;;   (let* ((dired-toggle-enabled (if dired-toggle-mode 1 0))
;;          (dired-hide-details-enabled (if dired-hide-details-mode 1 0))
;;          (buffer (current-buffer))
;;          (file (dired-get-file-for-visit))
;;          (dir-p (file-directory-p file)))
;;     (if dir-p                           ;open a directory
;;         ;; (dired-toggle-list-dir buffer (file-name-as-directory file))
;;         (find-alternate-file file)
;;       ;; open a file, and delete the referred window firstly
;;       (if (and (window-live-p dired-toggle-refwin)
;;                (not (window-minibuffer-p dired-toggle-refwin))
;;                ;; Some times `dired-toggle-refwin' maybe dired-toggle
;;                ;; window itself, so just ignore it.
;;                (not (equal (selected-window) dired-toggle-refwin)))
;;           (delete-window dired-toggle-refwin))
;;       (dired-find-file)
;;       (dired-toggle)
;;       (windmove-right))
;;     (when (eq major-mode 'dired-mode)
;;       (dired-toggle-mode dired-toggle-enabled)
;;       (dired-hide-details-mode dired-hide-details-enabled))))

;; OR
;; ...
      ;; (dired-find-file)
      ;; ...
      
;; and
        ;; (setq target-window (display-buffer-in-side-window (current-buffer) '((side . left))))
        ;; (select-window target-window)
        ;; (switch-to-buffer target-buf)
        ;; (set-window-dedicated-p target-window t)
        ;; (let ((dired-window-width 30))
        ;;   (cond ((> (window-width) dired-window-width)
        ;;          (shrink-window-horizontally  (- (window-width) dired-window-width)))
        ;;         ((> (window-width) dired-window-width)
        ;;          (enlarge-window-horizontally  (- dired-window-width (window-width))))
        ;;         ))
        ;; in dired-toggle


      

  

;; (defun sired ()
;;   "Invoke Sired"
;;   (interactive)
;;   (if (bound-and-true-p  sired-showing)
;;       (progn (delete-window (get-buffer-window sired-buffer-name))
;;              (setq sired-showing nil))
;;     (sired-init))
;;   )
;; (defun sired-init ()
;;   "Initialize sired buffer"
;;   (select-window (display-buffer-in-side-window (dired-noselect (file-name-directory (buffer-file-name)))'((side . left))))
;;   (setq sired-buffer-name 
;;         (rename-buffer (concat "sired-" (buffer-name))))
;;   (set-window-dedicated-p (selected-window) t)
;;   (let ((sired-window-width 30))
;;     (cond ((> (window-width) sired-window-width)
;;            (shrink-window-horizontally  (- (window-width) sired-window-width)))
;;           ((> (window-width) sired-window-width)
;;            (enlarge-window-horizontally  (- sired-window-width (window-width))))
;;           )
;;     (setq sired-showing t)
;;     )
;;   )
;; (expand-file-name (buffer-file-name))
;; (direc)


;; ((dired-noselect  (file-name-directory buffer-file-name)))
#+END_SRC

** Nikola to Hugo
Helper Functions to export nikola blog posts to hugo blog post format
#+BEGIN_SRC emacs-lisp :tangle no
(defun export-files-to-hugo-misc-section ()
  (interactive)
  (export-numbered-files-to-hugo "misc"))

(defun export-files-to-hugo-db-section ()
  (interactive)
  (export-numbered-files-to-hugo "db"))

(defun export-files-to-hugo-ds-section ()
  (interactive)
  (export-numbered-files-to-hugo "ds"))

(defun export-files-to-hugo-algos-section ()
  (interactive)
  (export-numbered-files-to-hugo "algos"))

(defun export-files-to-hugo-cs1-section ()
  (interactive)
  (export-numbered-files-to-hugo "cs1"))

(defun export-numbered-files-to-hugo(subsection)
    "Exports all numbered files in current dir to (hugo) markdown"
    (export-files-to-hugo
     "[0-9].*" subsection))

;; (defun export-files-to-hugo (&optional regex)
;;   "Exports all files in current dir that match 'regex' to (hugo) markdown"
;;   (mapc 'trigger-export
;;         (directory-files default-directory nil regex)))

(defun export-files-to-hugo (&optional regex subsection)
  "Exports all files in current dir that match 'regex' to (hugo) markdown"
  (mapc (lambda (file)
        (funcall #'trigger-export file subsection))
      (directory-files default-directory nil regex)))
  ;; (mapc 'trigger-export
  ;;       (directory-files default-directory nil regex)))

(defun trigger-export(f subsection)
  (find-file f)
  (nikola-to-hugo-header subsection)
  (save-buffer)
  (org-hugo-export-to-md)
  (kill-buffer (current-buffer))
  (progn (setq kill-ring nil) (garbage-collect))
)

(defun nikola-to-hugo-header(subsection)
  (interactive)
  (nikola-kill-title)
  (nikola-append-kill-date)

  (search-forward "#+END_COMMENT")
  (delete-region (point-min) (point))
  (hugo-insert-header subsection)
  (goto-char (point-min))
  (kill-whole-line)
  )

(defun nikola-kill-title ()
  (goto-char (point-min))
  (search-forward "title:")
  (kill-line)
  (kill-append "#+TITLE:" t))

(defun nikola-append-kill-date ()
  (goto-char (point-min))
  (search-forward "date:")
  (kill-append "#+DATE:" nil)
  (append-next-kill)
  (kill-line))

(defun hugo-insert-header (subsection)
  (setq hugo-header
        `("#+HUGO_BASE_DIR: ../../../"
          ,(concat "#+HUGO_SECTION: uni/" subsection)
          "#+HUGO_DRAFT: false"
          "#+HUGO_AUTO_SET_LASTMOD: true"
          ""))

  (hugo-insert-date-title)
  (mapc 'insert-line hugo-header)
  )

(defun insert-line (str)
  (open-line 1)
  (next-line 1)
  (insert str))

(defun hugo-insert-date-title ()
  (open-line 1)
  (next-line 1)
  (yank)
  (search-backward "#")
  (open-line 1)
  (next-line 1))
#+END_SRC

** Eshell Customization
#+begin_src emacs-lisp
  (defmacro with-face (str &rest properties)
    `(propertize ,str 'face (list ,@properties)))
  
  (defun shk-eshell-prompt ()
    (let ((header-bg "#fff"))
      (concat
       (with-face (concat (eshell/pwd) " ") :background header-bg)
       (with-face (format-time-string "(%Y-%m-%d %H:%M) " (current-time)) :background header-bg :foreground "#888")
       (with-face
        (or (ignore-errors (format "(%s)" (vc-responsible-backend default-directory))) "")
        :background header-bg)
       (with-face "\n" :background header-bg)
       (with-face user-login-name :foreground "#0184bc")
       "@"
       (with-face "gaia" :foreground "#d75f00")
       (if (= (user-uid) 0)
           (with-face " #" :foreground "red")
         " $")
       " ")))
  (setq eshell-prompt-function 'shk-eshell-prompt)
  (setq eshell-highlight-prompt nil)
#+end_src
