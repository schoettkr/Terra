* Prepare Config
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+end_src


* Package Manager Setup
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil) ; tells emacs not to load any packages before starting up

  ;; the following lines tell emacs where on the internet to look up
  ;; for new packages.
  ;; when facing problems with package installation delete ~/.emacs.d/elpa/archives/melpa/archive-contents and `M-x package-refresh-contens` on next launch
  (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                           ("gnu"       . "https://elpa.gnu.org/packages/")
                           ("melpa"     . "https://melpa.org/packages/")
                           ;;("marmalade" . "http://marmalade-repo.org/packages/")
                           ))

  (package-initialize) ; guess what this one does ?

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package) ; unless it is already installed
    (package-refresh-contents) ; updage packages archive
    (package-install 'use-package)) ; and install the most recent version of use-package

  (require 'use-package) ; guess what this one does too ?
#+end_src


* General
#+begin_src emacs-lisp
(setq delete-old-versions -1 )		; delete excess backup versions silently
(setq version-control t )		; use version control
(setq vc-make-backup-files t )		; make backups file even when in version controlled dir
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
(setq vc-follow-symlinks t )				       ; don't ask for confirmation when opening symlinked file
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
(setq inhibit-startup-screen t )	; inhibit useless and old-school startup screen
(setq ring-bell-function 'ignore )	; silent bell when you make a mistake
(setq coding-system-for-read 'utf-8 )	; use utf-8 by default
(setq coding-system-for-write 'utf-8 )
(setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
(setq default-fill-column 80)		; toggle wrapping text at the 80th character
(setq-default tab-width 2)                    ; tab are 2 spaces large
(setq initial-scratch-message "Welcome to Emacs") ; print a default message in the empty scratch buffer opened at startup
(setq tab-stop-list (number-sequence 2 120 2)) ;; set tab length
(setq evil-want-C-u-scroll t) ;; scroll with C-u like in vim
;;(set-display-table-slot standard-display-table 'wrap ?\ )
(set-display-table-slot standard-display-table 0 ?\ ) 
(set-display-table-slot standard-display-table 'wrap ?\ )
(setq-default indent-tabs-mode nil)

(mapc
 (lambda (face)
   (set-face-attribute face nil :weight 'normal :underline nil))
 (face-list))
#+end_src


* Appearance

** All the icons
#+begin_src emacs-lisp
  (setq load-prefer-newer t)
  (use-package all-the-icons :ensure t :defer t)
  ;; dont forget to M-x all-the-icons-install-fonts
#+end_src

** General
#+begin_src emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  ;; (set-face-attribute 'default nil :height 120)
  ;; (set-default-font "Noto Sans 12")
  ;; (set-default-font "Fira Mono 12")
  (add-to-list 'default-frame-alist '(font . "Fira Mono 12"))
  ;; (add-to-list 'default-frame-alist '(font . "Input Mono Light"))
  ;; (set-default-font "Fira Code 12")
  ;; (set-default-font "Hack 12")
  ;; (set-default-font "Inconsolata 14")
  ;; (set-default-font "Droid Sans Mono for Powerline Plus Nerd File Types Mono 13")
  (toggle-scroll-bar -1)
  ;;  (set-fringe-mode 0) ;; deactivates gutters at screen edges on linebreak
  (setq whitespace-line-column 999)
  (set-face-bold-p 'bold nil)
  ;;(set-window-fringes (selected-window) 0 0 nil)
  ;; (setq whitespace-style '(faces spaces indentation))

#+end_src

** Modeline
*** Diminish
#+BEGIN_SRC emacs-lisp
  (eval-when-compile (require 'cl))

  (defvar diminish-must-not-copy-minor-mode-alist nil
    "Non-nil means loading diminish.el won't (copy-alist minor-mode-alist).
  Normally `minor-mode-alist' is setq to that copy on loading diminish because
  at least one of its cons cells, that for abbrev-mode, is read-only (see
  ELisp Info on \"pure storage\").  If you setq this variable to t & then
  try to diminish abbrev-mode under GNU Emacs 19.34, you'll get the error
  message \"Attempt to modify read-only object\".")

  (or diminish-must-not-copy-minor-mode-alist
      (callf copy-alist minor-mode-alist))

  (defvar diminished-mode-alist nil
    "The original `minor-mode-alist' value of all (diminish)ed modes.")

  (defvar diminish-history-symbols nil
    "Command history for symbols of diminished modes.")

  (defvar diminish-history-names nil
    "Command history for names of diminished modes.")


  (defun diminish (mode &optional to-what)
    "Diminish mode-line display of minor mode MODE to TO-WHAT (default \"\").
  Interactively, enter (with completion) the name of any minor mode, followed
  on the next line by what you want it diminished to (default empty string).
  The response to neither prompt should be quoted.  However, in Lisp code,
  both args must be quoted, the first as a symbol, the second as a string,
  as in (diminish 'jiggle-mode \" Jgl\").
  The mode-line displays of minor modes usually begin with a space, so
  the modes' names appear as separate words on the mode line.  However, if
  you're having problems with a cramped mode line, you may choose to use single
  letters for some modes, without leading spaces.  Capitalizing them works
  best; if you then diminish some mode to \"X\" but have abbrev-mode enabled as
  well, you'll get a display like \"AbbrevX\".  This function prepends a space
  to TO-WHAT if it's > 1 char long & doesn't already begin with a space."
    (interactive (list (read (completing-read
                              "Diminish what minor mode: "
                              (mapcar (lambda (x) (list (symbol-name (car x))))
                                      minor-mode-alist)
                              nil t nil 'diminish-history-symbols))
                       ))
    (let ((minor (assq mode minor-mode-alist)))
      (when minor
        (progn (callf or to-what "")
               (when (and (stringp to-what)
                          (> (length to-what) 1))
                 (or (= (string-to-char to-what) ?\ )
                     (callf2 concat " " to-what)))
               (or (assq mode diminished-mode-alist)
                   (push (copy-sequence minor) diminished-mode-alist))
                 (setcdr minor (list to-what))))))

#+END_SRC
** Theme
#+begin_src emacs-lisp
  ;;(use-package subatomic-theme :ensure t)
  ;;(use-package moe-theme :ensure t)
  ;; (load-theme 'github-modern t)
  ;; (load-theme 'subatomic t)
  ;; (moe-light)

  ;; (use-package spacemacs-theme
  ;;   :ensure t
  ;;   :defer t
  ;;   :init (load-theme 'spacemacs-light t))

;  (use-package doom-themes
;    :ensure t
;    :defer t
;    :config (setq doom-themes-enable-bold nil
;                  doom-themes-enable-italic nil))
;  ;; (load-theme 'doom-one-light)
;  ;(load-theme 'doom-one)
;  (load-theme 'doom-dracula)
  ;; (load-theme 'doom-molokai)

#+end_src


* Functions
#+begin_src emacs-lisp

;;(defun my-flymake-show-next-error()
;;    (interactive)
;;    (flymake-goto-next-error)
;;    (flymake-popup-current-error-menu)
;;    )

(defun open-termite ()
  (interactive "@")
  (shell-command (concat "termite"
                         " > /dev/null 2>&1 & disown") nil nil))
(defun indent-buffer ()
  "Apply indentation rule to the entire buffer."
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max)))

(defun company-mode/backend-with-yas (backend)
  (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
      backend
    (append (if (consp backend) backend (list backend))
            '(:with company-yasnippet))))

(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode -1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

(defun add-semicolon ()
  (interactive)
  (end-of-line)
  (when (not (looking-back ";"))
    (insert ";"))
  (evil-first-non-blank))

(defvar counter 0)
(defun popup-shell ()
  (interactive)
  (setq counter (+ counter 1))
  (setq title (concat "Terminal-" (number-to-string counter)))
  (setq buf-title (concat "*" title "*"))
  (ansi-term "/bin/zsh" buf-title)
  (mode-line-other-buffer)
  (split-window-below)
  (enlarge-window 15)
  (evil-window-down 1)
  )
;; (defun popup-shell ()
;;   (interactive)
;;   (ansi-term "/usr/bin/zsh" "terminal")
;; (split-window-below)
;; (mode-line-other-buffer)
;; (other-window 1)
;; (enlarge-window 15)
;; (/ (frame-height) 5)
;; (add-to-list 'default-frame-alist '(height . (/ (frame-height) 5)))
;; )

;; (defvar counter 0)
;; (defun popup-shell ()
;;   "Open a new terminal and rename the buffer"
;;   (interactive)
;;   (setq counter (+ counter 1))
;;   (setq title (concat "Terminal-" (number-to-string counter)))
;;   (setq buf-title (concat "*" title "*"))
;;   (message buf-title)
;;   (set-buffer (make-term title "/bin/zsh"))
;; (term-mode)
;; (term-char-mode)
;; (switch-to-buffer buf-title)
;; )


#+end_src



* Keybindings 
#+begin_src emacs-lisp
;;(global-set-key (kbd "<escape>")      'keyboard-escape-quit) ;; send quit signal with escape
;;(global-set-key (kbd "<escape>")      'keyboard-quit) ;; send quit signal with escape
(define-key key-translation-map (kbd "ESC") (kbd "C-g"))

;;(global-unset-key (kbd "SPC")) ;; hinders insertion of space in ins mode
#+end_src

** General.el
#+begin_src emacs-lisp
  (use-package general :ensure t
    :config
    (general-define-key
     ;; replace default keybindings
     :states '(normal emacs)
     "C-s" 'swiper             ; search for string in current buffer
     ;;   "C-p" 'company-select-previous             ; search for string in current buffer
     ;;   "C-n" 'company-select-next             ; search for string in current buffer
     "/" 'swiper             ; search for string in current buffer
     "M-x" 'counsel-M-x        ; replace default M-x with ivy backend
     "n" 'evil-search-previous
     "N" 'evil-search-next
     "\\" 'evil-ex-nohighlight
     ;; "C-w" 'evil-delete-buffer
     )

    (general-def :states '(normal motion emacs) "SPC" nil)
    (general-def :keymaps '(compilation-mode-map magit-diff-mode-map magit-status-mode-map dired-mode-map) "SPC" nil)
    (general-def :keymaps '(compilation-mode-map magit-diff-mode-map magit-status-mode-map) "$" nil)

    (general-define-key
     :states '(normal motion emacs)
     :prefix "SPC"

     ;; simple command
     "x" 'counsel-M-x        ; replace default M-x with ivy backend
     "TAB" '(mode-line-other-buffer :which-key "prev buffer")
     "SPC" '(avy-goto-word-or-subword-1  :which-key "go to char")
     "C-'" 'avy-goto-word-1
     "qq"  '(save-buffers-kill-terminal :which-key "Save all & quit")
     "RET" '(add-semicolon :which-key "Insert ; at eol")
     "/" '(counsel-ag :which-key "Counsel ag search [everywhere]")
     ;; "'" '(ansi-term "/usr/bin/zsh" :which-key "popup shell")
     "'" '(popup-shell :which-key "popup shell")

     ;; Applications
     "a" '(:ignore t :which-key "Applications")
     "aa" '(ag :which-key "Ag")
     "ar" '(ranger :which-key "Ranger")
     "at" '(open-termite :which-key "Termite")
     "ac" '(compile :which-key "compile")
     "ar" '(recompile :which-key "recompile")
     "ao" '(occur :which-key "occur") ;; example usage function\|var
     "ad" 'dired

     ;; Buffer
     "b" '(:ignore t :which-key "Buffer")
     "bb" '(ivy-switch-buffer :which-key "Change buffer")
     "bd" '(kill-buffer :which-key "kill buffer")
     "bp" '(switch-to-prev-buffer :which-key "prev buffer")
     "bn" '(switch-to-prev-buffer :which-key "next buffer")

     "c" '(kill-this-buffer :which-key "kill current buffer")
   

     "dd"  '(kill-buffer-and-window :which-key "Kill buffer and window")

     ;; ;; Flymake
     ;; "m" '(:ignore t :which-key "Major Mode")

     ;; Flymake
     "e" '(:ignore t :which-key "Flymake")
     "eh" '(flymake-popup-current-error-menu :which-key "show error msg")
     "en" '(flymake-goto-next-error :which-key "next error")
     "ep" '(flymake-goto-prev-error :which-key "prev error")

     ;; Files
     "f" '(:ignore t :which-key "Files")
     "ff" '(counsel-find-file :which-key "find file")
     "f." '(counsel-find-file :which-key "find file")
     "fr"	'(counsel-recentf   :which-key "recent files")
     "fs" '(save-buffer :which-key "save file")
     "f/" '(swiper :which-key "search in file")
     "ft" '(treemacs-toggle :which-key "toggle treemacs")

     ;; Git
     "g" '(:ignore t :which-key "Git")
     "gs" '(magit-status :which-key "status")

     ;; Help
     "h" '(:ignore t :which-key "Help")
     "hh" '(help-for-help-internal :which-key "open help")

     ;; Projects
     "p" '(:ignore t :which-key "Projects")
     "pf" '(counsel-git :which-key "Find file in git project")
     "p/" '(projectile-ag :which-key "Projectile ag search [in project]")
     "pp" '(projectile-switch-project :which-key "Switch project")

     ;; Windows
     "w" '(:ignore t :which-key "Windows")
     "1" '(winum-select-window-1 :which-key "win 1")
     "2" '(winum-select-window-2 :which-key "win 2")
     "3" '(winum-select-window-3 :which-key "win 3")
     "4" '(winum-select-window-4 :which-key "win 4")
     "5" '(winum-select-window-5 :which-key "win 5")
     "6" '(winum-select-window-6 :which-key "win 6")
     "ws" '(split-window-below :which-key "Horizontal split")
     "wv" '(split-window-right :which-key "Vertical split")
     "wd" '(evil-window-delete :which-key "close window")
     "ww" '(evil-window-next :which-far-key "next window")
     "wm" '(delete-other-windows :which-far-key "next window")
     "wu" '(winner-undo :which-key "winner undo")
     "wr" '(winner-redo :which-key "winner redo")
     "wh" '(evil-window-left :which-key "left")
     "wH" '(evil-window-move-far-left :which-key "move left")
     "wj" '(evil-window-down :which-key "down")
     "wJ" '(evil-window-move-very-bottom :which-key "move down")
     "wk" '(evil-window-up :which-key "up")
     "wK" '(evil-window-move-very-top :which-key "move up")
     "wl" '(evil-window-right :which-key "right")
     "wL" '(evil-window-move-far-right :which-key "move right")
     "w+" '(evil-window-increase-height 30 :which-key "increase height")
     "w-" '(evil-window-decrease-height 30 :which-key "decrease height")
     "wc" '(eyebrowse-create-window-config :which-key "create workspace")
     "wn" '(eyebrowse-next-window-config :which-key "next workspace")
     "wp" '(eyebrowse-prev-window-config :which-key "prev workspace")
     ;; (enlarge-window 15)
     )

    )
#+end_src




* General Packages
** Evil
#+begin_src emacs-lisp
(setq evil-symbol-word-search t)
(setq evil-want-Y-yank-to-eol t)
(use-package evil
  :ensure t
  :defer .1
  ; maybe setq vars in :init
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
  (setq-default evil-shift-width 2)
  (setq evil-search-module 'evil-search)
  ;;    (evil-set-initial-state 'occur-mode 'normal)

  ;;    (setq evil-ex-nohighlight t)
  ;; More configuration goes here
  )
#+end_src

** Org
Part below can be used to get a more recent version of org mode
#+begin_src emacs-lisp
;;(unless (file-expand-wildcards (concat package-user-dir "/org-[0-9]*"))
;;  (package-install (elt (cdr (assoc 'org package-archive-contents)) 0)))
;;(require 'org)
#+end_src

Making org mode work how I like it:
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :defer t
    :init 
    (setq org-bullets-bullet-list
          '("◉" "◎" "⚫" "○" "►" "◇"))
    ;; org-hide-emphasis-markers t)
    ;; (add-hook 'post-command-hook 'kk/org-latex-fragment-toggle t)
    (setq org-format-latex-options
          (quote(:foreground default :background default :scale 1.7 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
                             ("begin" "$1" "$" "$$" "\\(" "\\["))))
    :config
    (general-define-key
     :states '(normal motion)
     :keymaps 'org-mode-map
     :prefix "SPC"
     "m" '(:ignore :which-key "Major Mode[Org]")
     "mp" '(org-latex-export-to-pdf :which-key "Export to Pdf")
     )
  )
    (add-hook 'org-mode-hook 'visual-line-mode)
    (add-hook 'org-mode-hook 'company-mode)
    (add-hook 'org-mode-hook (lambda () (blink-cursor-mode -1)))
    (add-hook 'org-mode-hook (lambda () (linum-relative-mode t)))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))


                                          ; Force utf8 and then change todo symbols
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

  (setq org-todo-keywords (quote((sequence "⚑ Todo" "⚐ In Progress | Waiting" "|" "✔ Done" "✘ Canceled"))))
  (setq org-todo-keyword-faces
        '(("⚑ Todo" . "deep sky blue") ("⚐ In Progress | Waiting" . "orange") ("✘ Canceled" . (:foreground "red"))))
  (setq org-adapt-indentation nil)
  (setq-default org-display-custom-times t)
  (setq org-time-stamp-custom-formats '("<%a %d.%m.%Y>" . "<%a %d.%m.%Y %H:%M>"))

  ;; (setq org-agenda-files '("~/Dev/notes/inbox.org"
  ;;                          "~/Dev/notes/gtd.org"
  ;;                          "~/Dev/notes/tickler.org"))

  ;; (setq org-capture-templates '(("t" "Todo [inbox]" entry
  ;;                                (file+headline "~/Dev/notes/inbox.org" "Tasks")
  ;;                                "* TODO %i%?")
  ;;                               ("T" "Tickler" entry
  ;;                                (file+headline "~/Dev/notes/tickler.org" "Tickler")
  ;;                                "* %i%? \n %U")))
  ;; (setq org-refile-targets '(("~/Dev/notes/gtd.org" :maxlevel . 3)
  ;;                            ("~/Dev/notes/someday.org" :level . 1)
  ;;                            ("~/Dev/notes/tickler.org" :maxlevel . 2)))
  ;; Latex preview for .tex only
  ;; (use-package latex-preview-pane
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'org-mode-hook (lambda () (latex-preview-pane-mode 1))))
#+end_src

** Emacs Speak Statistics (ESS)
#+begin_src emacs-lisp
  (use-package ess
    :ensure t
    :defer t
    :init (require 'ess-site)
    :config 
    (general-define-key
     :states '(normal motion)
     :keymaps 'ess-mode-map
     :prefix "SPC"
     "m" '(:ignore :which-key "Major Mode[ESS]")
     "mb" '(ess-eval-buffer :which-key "Eval buffer")
     "ml" '(ess-eval-line-and-step :which-key "Eval line")
     "mr" '(ess-eval-region :which-key "Eval region")
     "mi" '(asb-ess-R-object-popup-str :which-key "String inspect")
     "mI" '(asb-ess-R-object-popup-interactive :which-key "Interactive inspect")
     )
    (defun asb-read-into-string (buffer)
      (with-current-buffer buffer
        (buffer-string)))

    (defun asb-ess-R-object-popup (r-func)
      "R-FUNC: The R function to use on the object.
    Run R-FUN for object at point, and display results in a popup."
      (let ((objname (current-word))
            (tmpbuf (get-buffer-create "**ess-R-object-popup**")))
        (if objname
            (progn
              (ess-command (concat "class(" objname ")\n") tmpbuf)
              (let ((bs (asb-read-into-string tmpbuf)))
                (if (not(string-match "\(object .* not found\)\|unexpected" bs))
                    (progn
                      (ess-command (concat r-func "(" objname ")\n") tmpbuf)
                      (let ((bs (asb-read-into-string tmpbuf)))
                        (popup-tip bs)))))))
        (kill-buffer tmpbuf)))

    (defun asb-ess-R-object-popup-str ()
      (interactive)
      (asb-ess-R-object-popup "str"))

    (defun asb-ess-R-object-popup-interactive (r-func)
      (interactive "sR function to execute: ")
      (asb-ess-R-object-popup r-func))
    )
  (use-package popup :ensure t)
#+end_src

** Polymode
#+begin_src emacs-lisp
(use-package polymode
  :ensure t
  :defer t
  :config
  (setq load-path
        (append '("~/.emacs.d/elpa/polymode-20170307"  "~/.emacs.d/elpa/polymode-20170307/")
                load-path))
  (require 'poly-R)
  (require 'poly-markdown)
  (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))
  (autoload 'r-mode "ess-site.el" "Major mode for editing R source." t)
  )

#+end_src

** Which key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode 1)
  (setq which-key-idle-delay 1))

#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package evil-magit
   :ensure t
;   :defer t ;; will loose keybinding overwritings
   :config 
   ;; (add-hook 'magit-mode-hook 'visual-line-mode)
   )
#+end_src

** Avy
#+begin_src emacs-lisp
(use-package avy :ensure t
  :defer t
  :commands (avy-goto-word-1))
#+end_src
** Ivy
#+begin_src emacs-lisp
(use-package ivy
  :defer t
  :commands (ivy-switch-buffer
             ivy-switch-buffer-other-window)
  :config
  (ivy-mode 1))
#+end_src

** Counsel
#+begin_src emacs-lisp
(use-package counsel :ensure t
  :defer t
  :config
  ;;  (setq counsel-find-file-at-point t)
  ;;  (setq counsel-locate-cmd 'counsel-locate-cmd-mdfind)
  (setq counsel-find-file-ignore-regexp "\\.DS_Store\\|.git\\|node_modules"))
(setq ivy-initial-inputs-alist nil)
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile :ensure t
  :defer t
  :config
  (setq projectile-mode-line " foo")
  (setq projectile-completion-system 'ivy)
  (setq projectile-file-exists-local-cache-expire (* 5 60))
  (projectile-global-mode t))
#+end_src

** Linum Relative
#+begin_src emacs-lisp
  (use-package linum-relative :ensure t
    :defer t
    :config
    (setq linum-relative-current-symbol ""))
  ;;   (global-linum-mode nil)
  ;;   (linum-relative-toggle)
#+end_src

** Dashboard
#+begin_src emacs-lisp
(use-package dashboard :ensure t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5)))
  )
;; (add-hook 'dashboard-mode-hook
;; 	    (lambda ()
;; 	       (set-display-table-slot buffer-display-table 'wrap ?\ )))
#+end_src

** Page Break Lines
Display horizontal lines instead of ugly characters
#+begin_src emacs-lisp
(use-package page-break-lines :ensure t)
;;  (add-hook 'page-break-lines-mode-hook
;; 	    (lambda ()
;; (set-display-table-slot standard-display-table 0 ?\ )))
;; (add-hook 'page-break-lines-mode-hook
;; (lambda ()
;;  (set-display-table-slot buffer-display-table 0 ?\ )))
;;(set-display-table-slot buffer-display-table 'wrap ?\ )))
#+end_src

** Company
#+begin_src emacs-lisp
(use-package company :ensure t
      :defer t
      :config
      (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
      (setq company-idle-delay 0.2)
      (add-hook 'company-mode-hook 'company-quickhelp-mode)
      ;(yas-reload-all)
)
                                        ;  :config
                                        ;  (global-company-mode t))
(with-eval-after-load 'company
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))

(defvar company-mode/enable-yas t
  "Enable yasnippet for all backends.")
;;(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
(use-package company-quickhelp :ensure t)

#+end_src

** Yasnippet
Needs to be looked into
#+begin_src emacs-lisp
;(use-package yasnippet :ensure t :defer t)
;;  :config
;;  (yas-global-mode 1))
#+end_src

** Treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  ;;:init
  ;;(with-eval-after-load 'winum
  ;;  (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (use-package treemacs-evil
      :ensure t
      :demand t)
    (setq treemacs-change-root-without-asking nil
          treemacs-collapse-dirs              (if (executable-find "python") 3 0)
          treemacs-file-event-delay           5000
          treemacs-follow-after-init          t
          treemacs-follow-recenter-distance   0.1
          treemacs-goto-tag-strategy          'refetch-index
          treemacs-indentation                2
          treemacs-indentation-string         " "
          treemacs-is-never-other-window      nil
          treemacs-never-persist              nil
          treemacs-no-png-images              nil
          treemacs-recenter-after-file-follow nil
          treemacs-recenter-after-tag-follow  nil
          treemacs-show-hidden-files          t
          treemacs-silent-filewatch           nil
          treemacs-silent-refresh             nil
          treemacs-sorting                    'alphabetic-desc
          treemacs-tag-follow-cleanup         t
          treemacs-tag-follow-delay           1.5
          treemacs-width                      35)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'extended))
      (`(t . _)
       (treemacs-git-mode 'simple)))))
;;(use-package treemacs-projectile
;;  :defer t
;;  :ensure t
;;  :config
;;  (setq treemacs-header-function #'treemacs-projectile-create-header))
#+end_src

** Winum
Maps numbers to windows on screen, allows switching windows by window number
#+begin_src emacs-lisp
(use-package winum :ensure t
  :defer t
  :config
  ;;  (setq winum-keymap
  ;;	(let ((map (make-sparse-keymap)))
  ;;	  (define-key map (kbd "C-0") 'winum-select-window-0-or-10)
  ;;	  (define-key map (kbd "C-1") 'winum-select-window-1)
  ;;	  (define-key map (kbd "M-2") 'winum-select-window-2)
  ;;	  (define-key map (kbd "M-3") 'winum-select-window-3)
  ;;	  (define-key map (kbd "M-4") 'winum-select-window-4)
  ;;	  (define-key map (kbd "M-5") 'winum-select-window-5)
  ;;	  (define-key map (kbd "M-6") 'winum-select-window-6)
  ;;	  (define-key map (kbd "M-7") 'winum-select-window-7)
  ;;	  (define-key map (kbd "M-8") 'winum-select-window-8)
  ;;	  map))
  (winum-mode)
  )

#+end_src

** Evil Commentary
#+begin_src emacs-lisp
(use-package evil-commentary :ensure t :defer t)
#+end_src
** Dumb Jump
#+begin_src emacs-lisp
;;(use-package dumb-jump :ensure t)
#+end_src

** Indent Guide
#+begin_src emacs-lisp
(use-package indent-guide :ensure t
:defer t
:config (set-face-background 'indent-guide-face "SkyBlue4")
;(setq indent-guide-delay 0.1)
(setq indent-guide-char " "))
; (use-package highlight-indentation :ensure t
; :config
;  (set-face-background 'highlight-indentation-face "#ffffff")
;  (set-face-background 'highlight-indentation-current-column-face "#ff0000")
;)
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters :ensure t :defer t)
#+end_src
** Ag
#+begin_src emacs-lisp
(use-package ag :ensure t :defer t)
#+end_src

** Tab/Buffer/Workspace
#+begin_src emacs-lisp
(use-package eyebrowse :ensure t :defer 1
:config (eyebrowse-mode t))
#+end_src

** Pdf Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :defer t
    :config
    (pdf-tools-install)
    (evil-set-initial-state 'pdf-view-mode 'normal)
    (evil-define-key 'normal pdf-view-mode-map
      ;; motion
      (kbd "<return>") 'image-next-line
      "j" 'pdf-view-next-line-or-next-page
      "k" 'pdf-view-previous-line-or-previous-page
      "J" 'pdf-view-next-page-command
      "K" 'pdf-view-previous-page-command
      "gj" 'pdf-view-next-page-command
      "gk" 'pdf-view-previous-page-command
      "gg" 'pdf-view-first-page
      "G" 'pdf-view-last-page
      "l"  'image-forward-hscroll
      "h"  'image-backward-hscroll
      ;; zoom
      "+" 'pdf-view-enlarge
      "-" 'pdf-view-shrink
      "0" 'pdf-view-scale-reset
      "=" 'pdf-view-enlarge

      "i" 'org-noter-insert-note
      "I" 'org-noter-insert-precise-note

      (kbd "<C-down-mouse-1>") 'pdf-view-mouse-extend-region
      (kbd "<M-down-mouse-1>") 'pdf-view-mouse-set-region-rectangle
      (kbd "<down-mouse-1>")  'pdf-view-mouse-set-region
      ;; search
      "/" 'pdf-occur

      "zd" 'pdf-view-dark-minor-mode
      "zm" 'pdf-view-midnight-minor-mode
      "zp" 'pdf-view-printer-minor-mode
      )

      (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
      (add-hook 'pdf-view-mode-hook (lambda () (linum-relative-mode -1)))
      (add-hook 'pdf-view-mode-hook (lambda () (linum-mode -1)))
      (add-hook 'pdf-view-mode-hook (lambda () (beacon-mode -1)))
      (evil-define-key 'normal pdf-occur-buffer-mode-map
        (kbd "<return>") 'pdf-occur-goto-occurrence)
    )
;  (evil-define-key 'normal pdf-occur-buffer-mode-map
;    (kbd "<return>") 'pdf-occur-goto-occurrence)
#+end_src






** Org Noter
#+begin_src emacs-lisp
  (use-package org-noter
  :defer t
    :ensure t)
#+end_src








** Smooth Scroll
#+begin_src emacs-lisp
  (use-package smooth-scroll
    :ensure t
    :config
    (smooth-scroll-mode 1)
    ;; (setq smooth-scroll/vscroll-step-size 5)
  ;; (setq scroll-step            5
    )
    (setq scroll-margin 5)
     (setq scroll-conservatively most-positive-fixnum)
#+end_src







** Beacon
#+begin_src emacs-lisp
(use-package beacon 
:ensure t
:config (beacon-mode 1))
#+end_src
** Color Identifiers
#+begin_src emacs-lisp
  (use-package color-identifiers-mode 
  :ensure t
  :config 
;;  (add-hook 'after-init-hook 'global-color-identifiers-mode)
  (add-to-list
   'color-identifiers:modes-alist
   `(typescript-mode . ("[^.][[:space:]]*"
                "\\_<\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)"
                (nil font-lock-variable-name-face))))
  )
#+end_src
** Eshell Autosuggest
#+begin_src emacs-lisp
(use-package esh-autosuggest
  :hook (eshell-mode . esh-autosuggest-mode)
  ;; If you have use-package-hook-name-suffix set to nil, uncomment and use the
  ;; line below instead:
  ;; :hook (eshell-mode-hook . esh-autosuggest-mode)
  :ensure t)
#+end_src

** Rainbow
#+begin_src emacs-lisp
(use-package rainbow-mode :ensure t)
#+end_src

** TemplateForNewPackage
#+begin_src emacs-lisp
#+end_src


* ProgMode
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'company-mode)
(add-hook 'prog-mode-hook 'electric-pair-mode)
(add-hook 'prog-mode-hook 'evil-commentary-mode)
(add-hook 'prog-mode-hook 'column-number-mode)
;;(add-hook 'prog-mode-hook 'yas-global-mode)
(add-hook 'prog-mode-hook 'yas-minor-mode)
(add-hook 'prog-mode-hook 'indent-guide-mode)
;;(add-hook 'prog-mode-hook 'highlight-indentation-mode)
(add-hook 'prog-mode-hook 'winner-mode)
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook 'linum-relative-mode)
(add-hook 'prog-mode-hook 'whitespace-mode)
(add-hook 'prog-mode-hook 'show-paren-mode)
#+end_src


* WebMode
#+begin_src emacs-lisp
(setq web-mode-markup-indent-offset 2) ; web-mode, html tag in html file
(setq web-mode-css-indent-offset 2) ; web-mode, css in html file
(setq web-mode-code-indent-offset 2) ; web-mode, js code in html file
#+end_src


* JavaScript

#+begin_src emacs-lisp
(use-package company-tern :ensure t
  :defer t
  :after company
  :config
(setenv "PATH" (concat (getenv "PATH") ":~/.node_modules/bin"))
    (setq exec-path (append exec-path '("~/.node_modules/bin")))
  (add-to-list 'company-backends 'company-tern)
(define-key tern-mode-keymap (kbd "M-.") nil)
(define-key tern-mode-keymap (kbd "M-,") nil)
)

(add-hook 'js2-mode-hook (lambda ()
                           (tern-mode)
                           (company-mode)))


(use-package js2-mode :ensure t
  :defer t
  :config
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  )

(setq javascript-indent-level 2) ; javascript-mode
(setq js-indent-level 2) ; js-mode
(setq js2-basic-offset 2) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
;;(setq tide-basic-offset 2) ;

#+end_src



* Typescript

#+begin_src emacs-lisp
(use-package typescript-mode 
  :defer t
  :config
  )

(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
(add-hook 'typescript-mode-hook #'setup-tide-mode)
(use-package tide :ensure t
  :defer t
  :config
  ;;(add-to-list 'auto-mode-alist '("\\.ts\\'" . tide-mode))
  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)
  ;; formats the buffer before saving
  ;;(add-hook 'before-save-hook 'tide-format-before-save)
  )
(setq typescript-indent-level 2
      typescript-expr-indent-offset 2)
(setq evil-shift-width 2)
(setq typescript-indent-level 2) ; 
(setq tide-tsserver-executable "~/.node_modules/bin/tsserver")


;; typescript mode specific keybindings
(general-define-key
 :states 'normal
 :keymaps 'typescript-mode-map
 "gd" 'tide-jump-to-definition
 "gr" 'tide-references
 )

(general-define-key
 :states 'normal
 :keymaps 'tide-references-mode-map
 "RET" 'tide-goto-reference
 )

#+end_src


* Css
#+begin_src emacs-lisp
(setq css-indent-offset 2) ; css-mode
#+end_src


* Go

#+begin_src emacs-lisp
;; go get: goflymake golang.org/x/tools/cmd/... godef gocode

(defun load-env-vars () 
  (let ((path (shell-command-to-string ". ~/.zshrc; echo -n $PATH")))
    (setenv "PATH" path)
    (setq exec-path (append (split-string-and-unquote path ":") exec-path)))

  (let ((gopath (shell-command-to-string ". ~/.zshrc; echo -n $GOPATH")))
    (setenv "GOPATH" gopath)
    (setq exec-path (append (split-string-and-unquote gopath ":") exec-path)))
  )

(use-package go-mode :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  ;; :load-path "/tmp/elisp/go-mode"
  )

(use-package go-guru :ensure t)

(use-package flymake-go :ensure t
  ;; :config
  ;; (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode))
  ;; :load-path "/tmp/elisp/go-mode"
  )

(use-package company-go :ensure t
  :after company
  :config
  (add-to-list 'company-backends 'company-go))

(defun my-go-mode-hook ()
  ;; (require 'go-guru)
  ;; (use-package go-guru
  ;; user-emacs-directory
  ;;  :load-path concat(user-emacs-directory "")"")

  (general-define-key
   :states 'normal
   :keymaps 'go-mode-map
   "gd" 'godef-jump
   "gh" 'godef-describe
   )

  (general-define-key
   :states '(normal motion)
   :keymaps 'go-mode-map
   :prefix "SPC"
   "m" '(go-guru-map :which-key "Major Mode[Go]")
   )
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save) ; gofmt before every save
  )





(add-hook 'go-mode-hook (lambda ()
                          (set (make-local-variable 'company-backends) '(company-go))
                          (company-mode)))

(add-hook 'go-mode-hook #'go-guru-hl-identifier-mode)
(add-hook 'go-mode-hook #'load-env-vars)
(add-hook 'go-mode-hook 'my-go-mode-hook)
(add-hook 'go-mode-hook (lambda () (whitespace-mode -1)))
#+end_src



* C++
#+BEGIN_SRC emacs-lisp
(add-hook 'c++-mode-hook
  (lambda ()
    (set (make-local-variable 'compile-command)
         (format "g++ -g %s -o %s" (buffer-name) (file-name-sans-extension (buffer-name))))))
#+END_SRC


* Python
#+BEGIN_SRC emacs-lisp
(use-package elpy :ensure t :defer t :config (elpy-enable))
#+END_SRC


* C#
#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode :ensure t)
;  (use-package omnisharp
;    :commands csharp-mode
;    :config
;    (add-hook 'csharp-mode-hook 'omnisharp-mode)
;    (add-to-list 'company-backends 'company-omnisharp))

  (use-package omnisharp
    :after company
    :config
;;(define-key omnisharp-mode-map (kbd ".") 'omnisharp-add-dot-and-auto-complete)
(define-key omnisharp-mode-map (kbd "<C-SPC>") 'omnisharp-auto-complete)
    (add-hook 'csharp-mode-hook
              (lambda ()
                (evil-define-key 'normal omnisharp-mode-map (kbd "g d") 'omnisharp-go-to-definition)
                ))
    (add-hook 'csharp-mode-hook 'omnisharp-mode)

    (add-hook 'csharp-mode-hook (lambda () (whitespace-mode -1)))
    (add-to-list 'company-backends 'company-omnisharp))
#+END_SRC


* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :defer t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC


* Misc
#+BEGIN_SRC emacs-lisp
    (diminish 'company-mode)
    (diminish 'abbrev-mode)
    (diminish 'yas-minor-mode)
    (diminish 'line-number-mode)
    (diminish 'linum-relative-mode)
    (diminish 'undo-tree-mode)
    (diminish 'eldoc-mode)
    (diminish 'tide-mode)
    (diminish 'flycheck-mode)
    (diminish 'evil-commentary-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'ivy-mode)
    (diminish 'which-key-mode)
    (diminish 'visual-line-mode)
    (diminish 'indent-guide-mode)
    (diminish 'auto-revert-mode)
    (diminish 'projectile-mode)

  (define-key global-map [(S-return)] 'add-semicolon)


#+END_SRC


* Theme Test
#+BEGIN_SRC emacs-lisp
  ;;  (defface special-comment '((t (:background "#fafafa" :foreground "#fafafa"))) "Green")
    (defface extra-comment '((t (:background "#fafafa" :foreground "#fafafa"))) "Green")

    ;;(defface extra-comment '((t (:foreground "#ffffff"))) "Cyan")

    (font-lock-add-keywords
     'prog-mode '(("\\(\\b\\|[[:graph:]]\\)\\( \\)" (1 'extr-comment -1) (2 'extra-comment t))))
     ;'typescript-mode '(("\\(\\b\\|[[:graph:]]\\)\\( \\)" (1 'extr-comment -1) (2 'extra-comment t))))

    (setq whitespace-space-regexp "\\(^ +\\| +$\\)") ; defines what should be matched as space, whitespaces that are not matched get default styling..

    (setq whitespace-display-mappings
          '((space-mark   32     [183]     [46]) ; space
            (space-mark   160    [164]     [95]) ; hard space
            (newline-mark ?\n    [?\n]) ; remove $ to not display it
            (tab-mark     ?\t    [?\u00BB ?\t] [?\\ ?\t])))

;    (add-to-list 'custom-theme-load-path (file-name-as-directory "~/Dev/one-light-theme/"))
;
;    (load-theme 'one-light t t)
;
;    (enable-theme 'one-light)

  (mapc (lambda (mode)
          (font-lock-add-keywords
          mode '(("\\(\\b\\|[[:graph:]]\\)\\( \\)" (1 'extr-comment -1) (2 'extra-comment t)))))
          ; '(("FIXME" 0 'show-paren-mismatch-face)
          ;  ("\\.\\( \\)\\b" 1 'extra-whitespace-face))))
        '(text-mode latex-mode mhtml-mode html-mode emacs-lisp-mode typescript-mode js2-mode  js-mode css-mode scss-mode go-mode
          texinfo-mode))
(evil-add-command-properties #'tide-jump-to-definition :jump t)

#+END_SRC
Status: 

